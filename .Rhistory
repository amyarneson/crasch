if (palette == "BASS") {
color <- c("gray52", "#80b1d3")
} else if (palette %in% row.names(brewer.pal.info)) {
color <- brewer.pal(3, palette)
} else if (all(areColors(palette)) & length(palette) == 2) {
color <- palette
} else {
stop('palette must be "BASS", an RColorBrewer palette, or a character with 2 valid color specifications.')
}
if (is.null(dim)) {
D <- 1:results$estSummary$D
} else if (is.numeric(dim)) {
D <- dim
}
K <- ncol(results$itemThres)
inclConsIDs <- results$consInfo$cons.ID[D]
inclItem <- results$itemInfo$cons.ID %in% inclConsIDs
inclConsIDs
inclItem
sum(inclItem)
probs <- lapply(thetaGrid, catProbs, itemThres = results$itemThres[inclItem,])
infoItem <- sapply(1:length(probs), function(x) {
expScore <- apply(probs[[x]], 2, function(y) {
sum(0:K * y, na.rm = TRUE)
})
colSums(sapply(1:length(expScore), function(y) {
((0:K - expScore[y]) ^ 2) * probs[[x]][,y]
}), na.rm = TRUE)
})
infoPers <- results$scoresRecoded[,inclItem]
if (type == "IIC") {
thetas <- results$scoresRecoded[,inclItem]
} else {
thetas <- results$persPars
}
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n, fillCol] <- infoItem[,which.min(abs(results$persPars[n, d] - thetaGrid))][fillCol]
if (type == "IIC") {
thetas[n, fillCol] = rep(thetaGrid[which.min(abs(results$persPars[n, d] - thetaGrid))], length(fillCol))
} else {
thetas[n, d] = thetaGrid[which.min(abs(results$persPars[n, d] - thetaGrid))]
}
}
}
# put NAs in if they didn't answer the question
infoPers[is.na(results$scoresRecoded[,inclItem])] <- NA
testInfo <- matrix(nrow = length(thetaGrid), ncol = results$estSummary$D)
testInfoPers <- matrix(nrow = results$estSummary$N, ncol = results$estSummary$D)
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = colSums(infoItem[itemsD,])
testInfoPers[,d] = rowSums(infoPers[,itemsD], na.rm = TRUE)
}
# flag complete cases
if (completeOnly) {
persToPlot <- complete.cases(results$scoresRecoded)
} else {
persToPlot <- rep(TRUE, nrow(results$persPars))
}
which(inclItem)
devtools::load_all()
info.graph(AMY, type = "IIC", dim = 2) # error in this one
which(inclItem)
i = 1
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(infoItem[i,])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Item Information Curve")
mtext(as.character(results$itemInfo$item.name[i]))
lines(thetaGrid, infoItem[i,], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[,i], infoPers[,i], pch = 21, col = color[1], bg = color[2])
i = 2
dim(infoItem)
itemInfo <- results$itemInfo
itemInfo <- results$itemInfo[inclItem,]
View(itemInfo)
View(infoPers)
probs <- lapply(thetaGrid, catProbs, itemThres = results$itemThres[inclItem,])
infoItem <- sapply(1:length(probs), function(x) {
expScore <- apply(probs[[x]], 2, function(y) {
sum(0:K * y, na.rm = TRUE)
})
colSums(sapply(1:length(expScore), function(y) {
((0:K - expScore[y]) ^ 2) * probs[[x]][,y]
}), na.rm = TRUE)
})
infoPers <- results$scoresRecoded[,inclItem]
if (type == "IIC") {
thetas <- results$scoresRecoded[,inclItem]
} else {
thetas <- results$persPars
}
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n, fillCol] <- infoItem[,which.min(abs(results$persPars[n, d] - thetaGrid))][fillCol]
if (type == "IIC") {
thetas[n, fillCol] = rep(thetaGrid[which.min(abs(results$persPars[n, d] - thetaGrid))], length(fillCol))
} else {
thetas[n, d] = thetaGrid[which.min(abs(results$persPars[n, d] - thetaGrid))]
}
}
}
# put NAs in if they didn't answer the question
infoPers[is.na(results$scoresRecoded[,inclItem])] <- NA
testInfo <- matrix(nrow = length(thetaGrid), ncol = results$estSummary$D)
testInfoPers <- matrix(nrow = results$estSummary$N, ncol = results$estSummary$D)
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = colSums(infoItem[itemsD,])
testInfoPers[,d] = rowSums(infoPers[,itemsD], na.rm = TRUE)
}
# flag complete cases
if (completeOnly) {
persToPlot <- complete.cases(results$scoresRecoded)
} else {
persToPlot <- rep(TRUE, nrow(results$persPars))
}
devtools::load_all()
info.graph(AMY, type = "IIC", dim = 2) # error in this one
info.graph(AMY, type = "IIC", dim = 1)
View(thetas)
View(testInfoPers)
View(testInfoPers)
View(thetas)
rm(list=ls())
load("C:/Users/Amy/OneDrive/Development/crasch/.RData")
AMY$persFit
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
results = AMY
personID = 131
AMY$persPars
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
KIDMAP(AMY, personID = "131", dim = 2)
names(results)
?exists
exists(results$itemPars)
exists('results$itemPars')
names(results)
class(results$itemPars)
class(results$itemSEs)
class(results$itemThres)
class(results$itemFit)
class(results$persPars)
class(results$persSEs)
class(results$persRaw)
class(results$persMax)
class(persFit)
class(results$persFit)
class(results$popDist)
class(results$sepRel)
?is.list
class(results$estSummary)
class(results$classicalStats)
class(results$empties)
class(results$scoresOrig)
class(results$scoresRecoded)
class(results$itemInfo)
class(results$consInfo)
class(results$varsInfo)
length(results)
lappy(results, is.null)
lapply(results, is.null)
sapply(results, is.null)
any(sapply(results, is.null))
devtools::load_all()
KIDMAP(results)
KIDMAP(AMY, personID = 1)
length(AMY)
devtools::load_all()
KIDMAP(AMY, personID = 1)
devtools::load_all()
KIDMAP(AMY, personID = 1)
devtools::load_all()
KIDMAP(AMY, personID = 1)
devtools::load_all()
KIDMAP(AMY, personID = 1)
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = 131, imageType = "poop")
personID = "131"
as.character(personID) %in% row.names(results$scoresOrig) &
length(personID) == 1 &
(is.character(personID) | is.numeric(personID))
!(as.character(personID) %in% row.names(results$scoresOrig) &
length(personID) == 1 &
(is.character(personID) | is.numeric(personID)))
probBounds = c(.25, .75)
?all
all(probBounds <= 1 & probBounds >= 0)
(!(length(probBounds) == 2 &
all(probBounds <= 1 & probBounds >= 0) &
(probBounds[1] <= probBounds[2])))
(probBounds[1] <= probBounds[2])
View(AMY$itemInfo)
minCell = 8
minCell %% 1
minCell %% 3
minCell %% 4
8.4 %% 1
!(is.numeric(minCell) & minCell > 0 & minCell %% 1 != 0)
focusTheta = c(-2,0,2)
is.numeric(focusTheta)
itemInfo <- AMY$itemInfo
View(itemInfo)
length(unique(itemInfo$item.ID)) != nrow(itemInfo)
devtools::load_all()
pers.hist(AMY)
pers.hist(AMY, dim = 2)
pers.hist(AMY, dim = 2.1)
devtools::load_all()
infit.MNSQ(AMY)
infit.MNSQ(AMY, itemOrder = c(1,3,5))
infit.MNSQ(AMY, itemOrder = "poop")
devtools::load_all()
infit.MNSQ(AMY, itemOrder = "poop")
devtools::load_all()
infit.MNSQ(AMY, itemOrder = "poop")
wm(AMY, itemOrder = 1:4) # errors/warnings -- look into this next time!
wm(AMY, itemOrder = 1:5) # errors/warnings -- look into this next time!
devtools::load_all()
wm(AMY)
devtools::load_all()
wm(AMY)
wm(AMY, byCat = TRUE)
CPC.graph(AMY, palette = "PuBu")
?CPC.graph
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
!(is.numeric(minCell) & minCell > 0 & minCell %% 1 != 0)
is.numeric(minCell)
minCell > 0
minCell %% 1 != 0
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
devtools::load_all()
CPC.graph(AMY, palette = "PuBu")
CPC.graph(AMY, palette = "BASS")
CPC.graph(AMY, palette = "gray")
devtools::load_all()
CPC.graph(AMY, palette = "gray")
devtools::load_all()
CPC.graph(AMY, palette = "gray")
CPC.graph(AMY, palette = "BASS")
CPC.graph(AMY, palette = "PuBu")
library(testthat)
?expect_error
names(AMY)
AMY$varsInfo
devtools::test()
devtools::test()
devtools::test()
craschR(scores = ADPwide, itemInfo = ADPitem,
consInfo = ADPcons, varsInfo = ADPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
craschR(scores = SUPwide, itemInfo = SUPitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
?craschR
craschR(scores = SUPwide, itemInfo = SUPitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::test()
test = craschR(scores = SUPwide, itemInfo = SUPitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::load_all()
test = craschR(scores = SUPwide, itemInfo = SUPitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::test()
devtools::test()
bad <- craschR(scores = AMYwide, itemInfo = SUPitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
bad$estSummary
nrow(bad$itemInfo) != ncol(bad$scoresOrig)
nrow(bad$itemInfo)
ncol(bad$scoresOrig)
devtools::test()
devtools::test()
devtools::load_all()
devtools::load_all()
AMY$persFit
devtools::load_all()
item.scores(AMY)
devtools::load_all()
devtools::document()
devtools::load_all()
item.scores(AMY)
?legend
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
devtools::load_all()
item.scores(AMY)
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
item.scores(SUP)
SUP$persRaw
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
item.scores(SUP)
devtools::load_all()
item.scores(SUP)
devtools::load_all()
item.scores(SUP)
item.scores(SUP)
item.scores(SUP)$SUP$counts
?testthat::expect_equal
matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5,
byrow = TRUE)
item.scores(SUP)$SUP$counts == matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5,
byrow = TRUE)
devtools::test()
devtools::test()
as.matrix(item.scores(SUP)$SUP$counts)
is.na(as.matrix(item.scores(SUP)$SUP$counts))
as.matrix(item.scores(SUP)$SUP$counts) ==
matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5, byrow = TRUE))
as.matrix(item.scores(SUP)$SUP$counts) ==
matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5, byrow = TRUE)
devtools::test()
class(item.scores(SUP)$SUP$counts)
class(as.matrix(item.scores(SUP)$SUP$counts))
?table
class(as.data.frame(item.scores(SUP)$SUP$counts))
devtools::test()
devtools::test()
matrix(item.scores(SUP)$SUP$counts)
devtools::test()
devtools::test()
bad <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
?item.scores
item.scores(AMYwide))
item.scores(AMYwide)
devtools::load_all()
item.scores(AMYwide)
devtools::load_all()
item.scores(AMYwide)
?item.scores
use_data(AMY)
devtools::use_data(AMY)
devtools::use_data(SUP)
rm(list=ls())
devtools::test()
item.scores(AMY, dim = 2)
names(AMY)
devtools::load_all()
devtools::test()
SUP
item.scores(SUP)
devtools::test()
round(0.12500000,2)
devtools::test()
?pers.hist
devtools::test()
devtools::test()
devtools::test()
KIDMAP(AMY)
KIDMAP(AMY, personID = 112)
KIDMAP(AMY, personID = 112)
KIDMAP(SUP, personID = "1")
?infit.MNSQ
infit.MNSQ(SUP, writeout = FALSE)
infit.MNSQ(SUP, dim = 2)
infit.MNSQ(AMY, itemOrder = c(1:32))
infit.MNSQ(SUP, params = "steps")
infit.MNSQ(AMY, params = "steps")
infit.MNSQ(AMY, itemOrder = c(1:4, 10:12))
devtools::test()
devtools::test()
KIDMAP(SUP, personID = "112", writeout = FALSE)
KIDMAP(SUP, personID = 112, writeout = FALSE)
KIDMAP(SUP, personID = 112, dim = 2)
KIDMAP(SUP, personID = "112", writeout = FALSE)
SUP$persFit
KIDMAP(AMY, personID = 101)
KIDMAP(AMY, personID = 102)
KIDMAP(AMY, personID = 112)
KIDMAP(SUP, personID = "110")
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::test()
devtools::use_data(SUP, overwrite = TRUE)
rm(SUP)
devtools::test()
?devtools::test
devtools::load_all()
?pers.hist
pers.hist(SUP, palette = c("pink", "green"))
?KIDMAP
KIDMAP(SUP, personID = 112, palette = c("lightgreen", "lightpink", "black"))
KIDMAP(SUP, personID = 112, probBounds = c(.8, .2))
?pers.hist
pers.hist(SUP, palette = c("red"))
?infit.MNSQ
infit.MNSQ(AMY, palette = c("lightyellow", "grey", "lightpink"))
infit.MNSQ(SUP, palette = "PuBu")
infit.MNSQ(SUP, palette = c("lightpink", "pink"))
infit.MNSQ(SUP, palette = c("lightpink", "darkpink"))
infit.MNSQ(SUP, palette = c("lightpink", "black"))
