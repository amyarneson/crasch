round(AMY$itemPars[ADProws,],2) == round(ADP$itemPars,2)
AMY$itemPars[ADProws,] - ADP$itemPars
AMY$itemPars[ADProws,] - ADP$itemPars < .1
AMY$itemPars[ADProws,] - ADP$itemPars < ..01
AMY$itemPars[ADProws,] - ADP$itemPars < .01
AMY$itemPars[SUProws,] - SUP$itemPars < .01
names(AMY)
AMY$itemSEs[ADProws,] - ADP$itemSEs <.01
AMY$itemThres[ADProws,]-ADP$itemThres<.01
AMY$itemFit
AMY$itemFit[ADProws,] - ADP$itemFit <.01
ADP$itemFit
SUP$itemFit
AMY$itemFit[ADProws,] - ADP$itemFit[1:13]
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,]
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,] < .01
AMY$persPars[,1]
AMY$persPars
SUP$persPars
AMY$persPars[,2] - ADP$persPars < .01
AMY$persSEs[,1]- ADP$persSEs<.01
AMY$persSEs[,2]- ADP$persSEs<.01
AMY$persMax[,1]- SUP$persMax<.01
AMY$persFit
SUP$persFit
AMY$persFit[[2]]-ADP$persFit[[1]]<.01
AMY$popDist
SUP$popDist
AMY$popDist$mean[2]- ADP$popDist$mean
AMY$popDist$var.cov[2,2]-ADP$popDist$var.cov
AMY$sepRel
ADP$sepRel
AMY$sepRel[2]- ADP$selRel
AMY$sepRel[2]- ADP$sepRel
AMY$estSummary
AMY$classicalStats
SUP$classicalStats
AMY$classicalStats$ADP-ADP$classicalStats$ADP<.01
AMY$classicalStats$ADP
ADP$classicalStats$ADP
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
AMY$classicalStats$ADP[-1,]
ADP$classicalStats$ADP[-1,]
data1 <- AMY$wide
itemInfo1 <- AMYitem
data1 <- AMYwide
consInfo1 <- AMYcons
sepRel1 <- AMY$sepRel
data2 <- SUPwide
rm(data1,data2,sepRel1,itemInfo1,consInfo1)
rm(test)
data1 <- AMY$scoresRecoded
data2 <- SUP$scoresRecoded
itemInfo1 <- AMY$itemInfo
itemInfo2 <- SUP$itemInfo
consInfo1 <- AMY$consInfo
consInfo2 <- SUP$consInfo
sepRel1 <- AMY$sepRel
sepRel2 <- SUP$sepRel
output1 = list()
D1 = nrow(consInfo1)
N1 = nrow(data1)
output2 = list()
D2 = nrow(consInfo2)
N2 = nrow(data2)
dataMiss1 <- data1[, itemInfo1$cons.ID == consInfo1$cons.ID[1] ]
dataMiss2 <- data2[, itemInfo2$cons.ID == consInfo2$cons.ID[1] ]
dataMiss1
dataMiss2 == dataMiss1
dataMiss1[is.na(data1[, itemInfo1$cons.ID == consInfo$1cons.ID[1] ])] = 0
dataMiss1[is.na(data1[, itemInfo1$cons.ID == consInfo1$cons.ID[1] ])] = 0
dataMiss2[is.na(data2[, itemInfo2$cons.ID == consInfo2$cons.ID[1] ])] = 0
dataMiss1 == dataMiss2
inclItems1 <- which(itemInfo1$cons.ID == consInfo1$cons.ID[1])
inclItems2 <- which(itemInfo2$cons.ID == consInfo2$cons.ID[1])
inclItems1==inclItems2
inclItems1
inclItems2
I1 <- length(inclItems1)
I2 <- length(inclItems2)
I1==I2
dataComp1 <- data1[complete.cases(data1), inclItems1]
dataComp2 <- data2[complete.cases(data2), inclItems2]
dataComp1==dataComp2
dim(dataComp1)
dim(dataComp2)
View(dataComp1)
dataComp2
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
AMY$classicalStats$ADP[-1,]
ADP$classicalStats$ADP[-1,]
AMY$empties[[ADProws]]
ADProws
AMY$empties
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0]
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0] ==
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)
item.analysis(SUP)[[2]]$Count[item.analysis(SUP)[[2]]$Count!=0] ==
unlist(apply(SUPwide, 2, table))
item.analysis(AMY)[[1]]$Count +
item.analysis(AMY)[[1]]$Missing
AMY$estSummary$I
AMY$estSummary$N
item.analysis(AMY)[[2]]$Score
diff(item.analysis(AMY)[[2]]$Score)
AMY$consInfo$short.name
?match
match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)
AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
item.analysis(AMY)[[1]]$Construct, AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
item.analysis(AMY)[[1]]$Construct== AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
devtools::load_all()
devtools::test()
AMY$popDist$var.cov[1,1]
SUP$popDist$var.cov
devtools::load_all()
devtools::test()
all.equal(AMY$popDist$mean[2], ADP$popDist$mean, tolerance = .01)
?all.equal
devtools::load_all()
devtools::test()
AMY$itemPars[ADProws,]- ADP$itemPars<.01
devtools::test()
devtools::test()
devtools::test()
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,] <.01
apply(AMY$itemFit[ADProws,], 2, class)
apply(ADP$itemFit[1:13,], 2, class)
devtools::test()
as.numeric(AMY$itemFit[ADProws,])
matrix(as.numeric(AMY$itemFit[ADProws,]))
class(AMY$itemFit[ADProws,])
as.matrix(AMY$itemFit[ADProws,])
as.matrix(AMY$itemFit[ADProws,-1])
apply(as.matrix(AMY$itemFit[ADProws,-1]), 2, class)
as.matrix(ADP$itemFit[1:13, -1])
devtools::test()
as.matrix(AMY$itemFit[ADProws, -1])-as.matrix(ADP$itemFit[1:13, -1])<.01
as.matrix(AMY$itemFit[ADProws, -1])-as.matrix(ADP$itemFit[1:13, -1])
devtools::test()
s.matrix(AMY$itemFit[SUProws, -1])
as.matrix(AMY$itemFit[SUProws, -1])
length(SUProws)
devtools::test()
devtools::test()
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.01
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.1
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.2
ADP$itemFit[1:13, ]
as.matrix(ADP$itemFit[1:13, c(2,6)])
devtools::test()
as.matrix(AMY$itemFit[ADProws, c(2,6)])-
as.matrix(ADP$itemFit[1:13, c(2,6)])<.01
as.matrix(AMY$itemFit[SUProws, c(2,6)])-
as.matrix(SUP$itemFit[1:15, c(2,6)])<.01
as.matrix(SUP$itemFit[1:15,]
)
as.matrix(SUP$itemFit[1:15, c(2,6)])
class(as.matrix(SUP$itemFit[1:15, c(2,6)]))
apply(as.matrix(SUP$itemFit[1:15, c(2,6)]),2,class)
devtools::load_all()
devtools::test()
AMY$persPars[,2]
ADP$persPars
class(AMY$persPars[,2])
class(ADP$persPars)
devtools::test()
as.numeric(ADP$persPars)
matrix(ADP$persPars)
as.matrix(matrix(ADP$persPars))
as.matrix(ADP$persPars)
devtools::test()
AMY$persPars[,1]- as.matrix(SUP$persPars)<.01
c(as.matrix(SUP$persPars))
devtools::test()
as.matrix(AMY$itemFit[ADProws, c(2,6)])
as.matrix(ADP$itemFit[1:13, c(2,6)])
as.matrix(AMY$itemFit[SUProws, c(2,6)])
as.matrix(SUP$itemFit[1:15, c(2,6)])
devtools::test()
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)]))<.01
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)]))
abs(c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)])))<.01
devtools::test()
AMY$persSEs[,2]
ADP$persSEs
devtools::test()
devtools::test()
devtools::test()
AMY$persFit[[2]]
ADP$persFit[[1]]
devtools::test()
AMY$popDist$mean[2]
ADP$popDist$mean
class(AMY$popDist$mean[2])
class(ADP$popDist$mean)
as.numeric(ADP$popDist$mean)
devtools::test()
devtools::test()
devtools::test()
AMY$sepRel[2]
devtools::test()
devtools::test()
devtools::load_all()
rm(AMY)
devtools::test()
?devtools::test()
?devtools::test
bad <- craschR(scores = SUPwide, itemInfo = AMYitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
devtools::load_all()
devtools::test()
bad <- craschR(scores = SUPwide, itemInfo = AMYitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
?identical
devtools::load_all()
bad <- craschR(scores = SUPwide, itemInfo = AMYitem,
consInfo = SUPcons, varsInfo = SUPvars,
estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
devtools::test()
craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = TRUE, writeout = FALSE)
View(SUPitem)
View(SUPwide)
devtools::load_all()
craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = TRUE, writeout = FALSE)
!identical(SUP$itemInfo$item.name, colnames(SUP$scoresOrig))
SUPitem$item.name
colnames(SUPwide)
identical(SUPitem$item.name,colnames(SUPwide))
devtools::test()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
use_data(SUP, overwrite=TRUE)
devtools::use_data(SUP, overwrite=TRUE)
devtools::use_data(ADP, overwrite=TRUE)
devtools::use_data(AMY, overwrite=TRUE)
rm(list=ls())
devtools::load_all()
devtools::test()
AMY$itemFit[SUProws, c(2,6)]
ADProws = which(AMY$itemInfo$cons.ID == 22)
SUProws = which(AMY$itemInfo$cons.ID == 11)
AMY$itemFit[SUProws, c(2,6)]
SUP$itemFit[1:15, c(2,6)]
devtools::test()
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count!=0]
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[1]]$Construct
AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID,
AMY$consInfo$cons.ID)]
as.character(item.analysis(AMY)[[1]]$Construct)
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
pers.hist(SUP, palette = c("pink", "green")
)
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
?item.scores
item.scores(SUP, palette = "pink")
devtools::load_all()
devtools::test()
?CPC.graph
devtools::test()
CPC.graph(AMY, observed = TRUE)
devtools::test()
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(SUP, palette = "PuBu")
CPC.graph(SUP, observed = TRUE, minCell = 12)
CPC.graph(SUP, observed = TRUE, minCell = 12, focusTheta = 1.5)
devtools::load_all()
CPC.graph(SUP, observed = TRUE, minCell = 12, focusTheta = 1.5)
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(SUP, palette = "PuBu")
CPC.graph(SUP, observed = TRUE, minCell = 12)
CPC.graph(SUP, observed = FALSE, focusTheta = 1.5)
devtools::load_all
devtools::load_all()
CPC.graph(AMY, itemOrder = c(4,9,2)) # fix grey lines
CPC.graph(SUP, palette = "PuBu")     # fix grey lines
CPC.graph(SUP, observed = FALSE, focusTheta = 1.5) # fix grey lines
?ICC.graph
ICC.graph(SUP, palette = c("red", "blue", "no"))
devtools::load_all()
ICC.graph(SUP, palette = c("red", "blue", "no"))
ICC.graph(SUP, palette = "gray")
(ICC.graph(AMY, itemOrder = c(30:32))
)
devtools::test()
?info.graph
info.graph(SUP, palette = "sup")
devtools::load_all()
info.graph(SUP, palette = "sup")
info.graph(SUP, palette = c("red", "yellow", "blue"))
info.graph(AMY, dim = 6)
info.graph(SUP, thetaGrid = NULL)
info.graph(SUP, thetaGrid = c(-1, 0, 1))
info.graph(SUP, completeOnly = FALSE)
info.graph(SUP, palette = "PuBu")
info.graph(SUP, palette = c("red", "blue"))
})
info.graph(SUP, type = "TIC", completeOnly = FALSE)
info.graph(SUP, type = "TIC", palette = c("red", "pink"))
info.graph(SUP, type = "IIC")
devtools::test()
?wm
devtools::load_all()
wm(AMY, dim = 4)
wm(SUP, byCat = "TRUE")
(wm(SUP, palette = "red")
)
wm(AMY)
wm(AMY, dim = 2)
wm(AMY, byCat = TRUE)
wm(SUP, byCat = TRUE)
wm(AMY, dim = 2, byCat = TRUE)
devtools::test()
devtools::load_all()
citation(crasch)
citation('crasch')
?citation
devtools::load_all()
?citation
citation('crasch')
devtools::load_all()
devtools::load_all()
devtools::load_all()
citation('crasch')
devtools::load_all()
citation('crasch')
?crasch
devtools::document()
?crasch
package?crasch
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
?crasch
devtools::document()
?crasch
devtools::load_all()
devtools::document()
?crasch
devtools::load_all()
devtools::document()
?crasch
devtools::document()
?crasch
?cor
?craschR
rm(lisls())
rm(list=ls())
nrow(SUPitem)
nrow(ADPitem)
ADP1 <- craschR(scores = ADPwide[,c(1,2,4,7,8,10,12)],
itemInfo = ADPitem[c(1,2,4,7,8,10,12),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
ADP2 <- craschR(scores = ADPwide[,c(3,5,6,9,11,13)],
itemInfo = ADPitem[c(3,5,6,9,11,13),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
results1 <- ADP1
results2 <- ADP2
results1$estSummary
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
ADP1 <- craschR(scores = ADPwide[,c(1,2,4,7,8,10,12)],
itemInfo = ADPitem[c(1,2,4,7,8,10,12),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
ADP2 <- craschR(scores = ADPwide[,c(3,5,6,9,11,13)],
itemInfo = ADPitem[c(3,5,6,9,11,13),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
use_data(AMY, overwrite = TRUE)
devtools::use_data(AMY, overwrite = TRUE)
devtools::use_data(ADP, overwrite = TRUE)
devtools::use_data(SUP, overwrite = TRUE)
results1 < ADP1
results1 <- ADP1
results2 <- ADP2
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::build()
??install.github
