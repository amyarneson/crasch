}
redMatrix
nrow(redMatrix)
redMatrix <- reshape(fullMatrix, idvar = "item", timevar = "step",
direction = "wide")
# dichotomous items will not show up w/step params - account for this
if (any(apply(results$scoresRecoded, 2, max, na.rm = TRUE) == 1)) {
insertRows <- which(apply(results$scoresRecoded, 2, max, na.rm = TRUE) == 1)
for (i in insertRows) {
if (i == 1) {
redMatrix = rbind(rep(NA, ncol(redMatrix)), redMatrix)
} else if (i == results$estSummary$I) {
redMatrix = rbind(redMatrix, rep(NA, ncol(redMatrix)))
} else {
redMatrix = rbind(redMatrix[1:(i-1),], rep(NA, ncol(redMatrix)),
redMatrix[i:nrow(redMatrix),])
}
}
}
redMatrix = redMatrix[plotOrder,]
redMatrix = redMatrix[complete.cases(redMatrix),]
redMatrix
redMatrix <- reshape(fullMatrix, idvar = "item", timevar = "step",
direction = "wide")
# dichotomous items will not show up w/step params - account for this
if (any(apply(results$scoresRecoded, 2, max, na.rm = TRUE) == 1)) {
insertRows <- which(apply(results$scoresRecoded, 2, max, na.rm = TRUE) == 1)
for (i in insertRows) {
if (i == 1) {
redMatrix = rbind(rep(NA, ncol(redMatrix)), redMatrix)
} else if (i == results$estSummary$I) {
redMatrix = rbind(redMatrix, rep(NA, ncol(redMatrix)))
} else {
redMatrix = rbind(redMatrix[1:(i-1),], rep(NA, ncol(redMatrix)),
redMatrix[i:nrow(redMatrix),])
}
}
}
redMatrix
redMatrix = redMatrix[plotOrder,]
redMatrix
redMatrix = reshape(redMatrix)
redMatrix
redMatrix = redMatrix[complete.cases(redMatrix),]
redMatrix
toPlot <- data.frame(infit = redMatrix[,3])
row.names(toPlot) <- paste(redMatrix[,1], redMatrix[,2], sep = "_step")
toPlot
layout(matrix(1, nrow = 1))
origPar = par(no.readonly = TRUE) # to reset graphical parameters after
layout(matrix(1, nrow = 1))
?dotchart
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = "",
xlim=c(min(.7,min(infitMNSQ)),max(1.4,max(infitMNSQ))),
pch=".")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = ""
)
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = "",
xlim=c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch=".")
rect(xleft = 3/4, xright = 4/3, ybottom = 0, ytop = (length(toPlot[,1]) + 1),
col = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
border = NA)
abline(v=1, col = "darkgrey", lty = 3)
abline(v=3/4, col = "#80b1d3",lty = 3)
abline(v=4/3, col = "#80b1d3",lty=3)
points(rev(toPlot[,1]), items, pch = 21, bg = "#80b1d3")
points(rev(toPlot[,1]), row.names(toPlot), pch = 21, bg = "#80b1d3")
row.names(toPlot)
points(rev(toPlot[,1]), 4:1, pch = 21, bg = "#80b1d3")
points(rev(toPlot[,1]), 1:4, pch = 21, bg = "#80b1d3")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = "",
xlim=c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch=".")
points(rev(toPlot[,1]), 1:length(toPlot[,1]), pch = 21, bg = "#80b1d3")
axis(1, at = c(seq(1, min(.7, min(infitMNSQ)), by = -.1), seq(1,max(1.4,max(infitMNSQ)),by=0.1)))
axis(1, at = c(seq(1, min(.7, min(toPlot[,1])), by = -.1), seq(1,max(1.4,max(toPlot[,1])),by=0.1)))
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = "",
xlim=c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch=".")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = main, xlab = "Infit MNSQ", ylab = "",
xlim = c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch = ".")
rect(xleft = 3/4, xright = 4/3, ybottom = 0, ytop = (length(toPlot[,1]) + 1),
col = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
border = NA)
abline(v=1, col = "darkgrey", lty = 3)
abline(v=3/4, col = "#80b1d3", lty = 3)
abline(v=4/3, col = "#80b1d3", lty = 3)
points(rev(toPlot[,1]), 1:length(toPlot[,1]), pch = 21, bg = "#80b1d3")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = "Infit Mean Squares", xlab = "Infit MNSQ", ylab = "",
xlim = c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch = ".")
rect(xleft = 3/4, xright = 4/3, ybottom = 0, ytop = (length(toPlot[,1]) + 1),
col = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
border = NA)
abline(v=1, col = "darkgrey", lty = 3)
abline(v=3/4, col = "#80b1d3", lty = 3)
abline(v=4/3, col = "#80b1d3", lty = 3)
points(rev(toPlot[,1]), 1:length(toPlot[,1]), pch = 21, bg = "#80b1d3")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = "Infit Mean Squares", xlab = "Infit MNSQ", ylab = "",
xlim = c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch = ".")
rect(xleft = 3/4, xright = 4/3, ybottom = 0, ytop = (length(toPlot[,1]) + 1),
col = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
border = NA)
abline(v=1, col = "darkgrey", lty = 3)
abline(v=3/4, col = "#80b1d3", lty = 3)
abline(v=4/3, col = "#80b1d3", lty = 3)
points(rev(toPlot[,1]), 1:length(toPlot[,1]), pch = 21, bg = "#80b1d3")
color <- c(rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255), "#80b1d3", "darkgrey")
dotchart(x = rev(toPlot[,1]), rev(row.names(toPlot)),
main = "Infit Mean Squares", xlab = "Infit MNSQ", ylab = "",
xlim = c(min(.7, min(toPlot[,1])), max(1.4, max(toPlot[,1]))),
pch = ".")
rect(xleft = 3/4, xright = 4/3, ybottom = 0, ytop = (length(toPlot[,1]) + 1),
col = color[1],
border = NA)
abline(v = 1, col = color[3], lty = 3)
#abline(v = 3/4, col = "#80b1d3", lty = 3)
#abline(v = 4/3, col = "#80b1d3", lty = 3)
points(rev(toPlot[,1]), 1:length(toPlot[,1]), pch = 21, bg = color[2])
devtools::load_all()
infit.MNSQ(AMY)
infit.MNSQ(AMY, params = "steps")
infit.MNSQ(AMY, itemOrder = c(1,2,4,6,8,10), params = "steps")
devtools::document()
devtools::document()
devtools::load_all()
load("C:/Users/Amy/OneDrive/Development/crasch/.RData")
rm(list=ls())
load("C:/Users/Amy/OneDrive/Development/crasch/.RData")
results = AMY
View(results$scoresRecoded)
personID = 121
rowIndex <- which(row.names(results$scoresRecoded) == as.character(personID))
respVector <- results$scoresRecoded[rowIndex,]
respVector
personID = "131"
rowIndex <- which(row.names(results$scoresRecoded) == as.character(personID))
respVector <- results$scoresRecoded[rowIndex,]
respVector
prod(dim(results$itemThres)))
prod(dim(results$itemThres))
d = 1
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d]),]
toPlot <- matrix(c(rep(1, prod(dim(thres))), item.thres0), ncol = 2,
byrow = FALSE)
toPlot <- matrix(c(rep(1, prod(dim(thres))), thres), ncol = 2,
byrow = FALSE)
toPlot
which(is.na(respVector))
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
inclItem
skipped <- which(is.na(respVector))
inclItem %in% skipped
!inclItem %in% skipped
!which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d]) %in% skipped
thres <- results$itemThres[inclItem,]
toPlot <- matrix(c(rep(1, prod(dim(thres))), thres), ncol = 2,
byrow = FALSE)
results$itemThres
rep(1:ncol(thres), length(inclItem))
rep(respVector, each = ncol(thres))
class(respVector)
respVector <- as.numeric(results$scoresRecoded[rowIndex,])
respVector
skipped
rm(skipped,inclItem)
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[inclItem,]
data.frame(x = rep(1, prod(dim(thres)),
thres = thres,
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector, each = ncol(thres)) )
)
data.frame(x = rep(1, prod(dim(thres))),
thres = thres,
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector, each = ncol(thres)) )
length(rep(1, prod(dim(thres))))
length(thres)
thres
length(rep(1:ncol(thres), length(inclItem)))
length(rep(respVector, each = ncol(thres)))
length(rep(respVector[inclItem], each = ncol(thres)))
data.frame(x = rep(1, prod(dim(thres))),
thres = thres,
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
data.frame(x = rep(1, prod(dim(thres))),
thres = c(thres),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
View(thres)
c(thres)
data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
toPlot = toPlot(conplete.cases(toPlot))
toPlot = toPlot[complete.cases(toPlot),]
toPlot
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[inclItem,]
toPlot <- data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
toPlot = toPlot[complete.cases(toPlot),]
toPlot
toPlot$reached = toPlot$step <= toPlot$score
toPlot
thres
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[inclItem,]
toPlot <- data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
item = rep(row.names(thres), each = ncol(thres)),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
toPlot
toPlot = toPlot[complete.cases(toPlot),]
toPlot$reached = toPlot$step <= toPlot$score
toPlot
paste(rep(row.names(thres), each = ncol(thres)),
rep(1:ncol(thres), length(inclItem)))
paste(rep(row.names(thres), each = ncol(thres)),
rep(1:ncol(thres), length(inclItem)), sep = "_")
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[inclItem,]
toPlot <- data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
score = rep(respVector[inclItem], each = ncol(thres)) )
row.names(toPlot) <- paste(rep(row.names(thres), each = ncol(thres)),
rep(1:ncol(thres), length(inclItem)), sep = "_")
toPlot
toPlot = toPlot[complete.cases(toPlot),] # removes steps that don't exist
# AND skipped items
toPlot$reached = toPlot$step <= toPlot$score
toPlot <- data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
row.names(toPlot) <- paste(rep(row.names(thres), each = ncol(thres)),
rep(1:ncol(thres), length(inclItem)), sep = "_")
toPlot = toPlot[complete.cases(toPlot),] # removes steps that don't exist
# AND skipped items
toPlot$reached = toPlot$step <= toPlot$score
toPlot
toPlot$x[toPlot$step <= toPlot$score] = -1
toPlot
upBd = results$persPars[rowIndex, d] - log(probBounds[2] / (1 - probBounds[2]))
loBd = results$persPars[rowIndex, d] - log(probBounds[1] / (1 - probBounds[1]))
probBounds = c(.25, .75)
upBd = results$persPars[rowIndex, d] - log(probBounds[2] / (1 - probBounds[2]))
loBd = results$persPars[rowIndex, d] - log(probBounds[1] / (1 - probBounds[1]))
upBd
lowBd
loBd
results$persPars[rowIndex, d]
upBd = results$persPars[rowIndex, d] - log(probBounds[1] / (1 - probBounds[1]))
loBd = results$persPars[rowIndex, d] - log(probBounds[2] / (1 - probBounds[2]))
log(probBounds[1] / (1 - probBounds[1]))
log(probBounds[2] / (1 - probBounds[2]))
upBd
loBd
paste0(imageType, "(KIDMAP-'", d, as.character(personID), "')")
imageType = "pdf"
fileSuffix = NULL
paste0(imageType, "(KIDMAP-'", d, as.character(personID), fileSuffix, "')")
paste0(imageType, "(KIDMAP-'", d, as.character(personID), fileSuffix, ".", imageType "')")
paste0(imageType, "(KIDMAP-'", d, as.character(personID), fileSuffix, ".", imageType, "')")
paste0(imageType, "('KIDMAP-", d,
as.character(personID), fileSuffix, ".",
imageType, "')")
par()
min(toPlot$thres, loBd) - .2
min(toPlot$thres, upBd) + .2)
min(toPlot$thres, upBd) + .2
max(toPlot$thres, upBd) + .2
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
origPar = par(no.readonly = TRUE) # to reset graphical parameters after
layout(matrix(1,nrow=1))
par(mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1,4.1,5.3,2.1))
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", personID,
"\nEst Theta: ", results$persPars[rowIndex, d],
side = 3, line = 0, cex = .8)
)
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", personID,
"\nEst Theta: ", results$persPars[rowIndex, d]),
side = 3, line = 0, cex = .8)
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", personID,
"\nEst Theta: ", round(results$persPars[rowIndex, d], 2)),
side = 3, line = 0, cex = .8)
names(results)
round(results$persRaw[rowIndex], 2)
round(results$persRaw[rowIndex, d], 2)
round(results$persMax[rowIndex, d], 2)
View(results$persFit)
?sirt::pcm.fit
devtools::load_all()
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$persFit
devtools::load_all()
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$persFit
results = AMY
results$persFit
round(results$persFit[[d]]$outfit, 2)
round(results$persFit[[d]]$outfit[rowIndex], 2)
paste0("Raw: ", round(results$persRaw[rowIndex, d], 2), "/",
round(results$persMax[rowIndex, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$outfit_t[rowIndex], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$infit_t[rowIndex], 2), ")")
mtext(paste0("Raw: ", round(results$persRaw[rowIndex, d], 2), "/",
round(results$persMax[rowIndex, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$outfit_t[rowIndex], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$infit_t[rowIndex], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached",adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = rgb(red = 128, green = 177, blue = 211, alpha = 127.5, maxColorValue = 255), border = NA)
color = c(expected = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
surprise = rgb(red = 255, green = 229, blue = 0, alpha = 127.5,
maxColorValue = 255))
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
color = c(expected = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
surprise = rgb(red = 255, green = 229, blue = 0, alpha = 127.5,
maxColorValue = 255),
points = "#80b1d3")
abline(v = 0)
abline(h = results$persPars[rowIndex, d])
axis(side = 2, at = c(seq(0, floor(loBd), by = -1),
seq(0, ceiling(upBd), by = 1)), las = 1)
Axis(side = 2, at = c(seq(0, floor(loBd), by = -1),
seq(0, ceiling(upBd), by = 1)), las = 1)
Axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
names(toPlot)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
row.names(toPlot[toPlot$x == -1, 1])
length(row.names(toPlot[toPlot$x == -1, 1]))
toPlot$x == -1
sum(toPlot$x == -1) == 1
?text
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1]), pos = 4, cex = .5)
toPlot$thres[toPlot$x == -1]
row.names(toPlot[toPlot$x == -1])
toPlot[toPlot$x == -1]
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1,]), pos = 4, cex = .5)
text(x = 1, y = toPlot$thres[toPlot$x == 1],
row.names(toPlot[toPlot$x == 1,]), pos = 2, cex = .5)
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", personID,
"\nEst Theta: ", round(results$persPars[rowIndex, d], 2)),
side = 3, line = 0, cex = .8)
mtext(paste0("Raw: ", round(results$persRaw[rowIndex, d], 2), "/",
round(results$persMax[rowIndex, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$outfit_t[rowIndex], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$infit_t[rowIndex], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached", adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = color[1], border = NA)
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
abline(v = 0)
abline(h = results$persPars[rowIndex, d])
axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
if (sum(toPlot$x == -1) == 1) {
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1,]), pos = 4, cex = .5)
}
if (sum(toPlot$x == 1) == 1) {
text(x = 1, y = toPlot$thres[toPlot$x == 1],
row.names(toPlot[toPlot$x == 1,]), pos = 2, cex = .5)
}
toPlot$thres[toPlot$x == -1]
sort(toPlot$thres[toPlot$x == -1])[seq(1, sum(toPlot$x == -1), 2)]
sort(toPlot$thres[toPlot$x == -1])
lft.R = sort(toPlot$thres[toPlot$x == -1])[seq(2, sum(toPlot$x == -1), 2)]
sort(toPlot$thres[toPlot$x == -1])[seq(2, sum(toPlot$x == -1), 2)]
toPlot
class(toPlot)
toPlot$thres[toPlot$x == -1]
order(toPlot$x)
order(toPlot$thres)
rm(lft.L, lft.R)
row.names(toPlot)[order(toPlot$thres)
])
row.names(toPlot)[order(toPlot$thres)]
text(-1, sort(toPlot$thres), labels = row.names(toPlot)[order(toPlot$thres)],
pos = c(2, 4), cex = .5)
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", personID,
"\nEst Theta: ", round(results$persPars[rowIndex, d], 2)),
side = 3, line = 0, cex = .8)
mtext(paste0("Raw: ", round(results$persRaw[rowIndex, d], 2), "/",
round(results$persMax[rowIndex, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$outfit_t[rowIndex], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[rowIndex], 2),
" (t=",round(results$persFit[[d]]$infit_t[rowIndex], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached", adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = color[1], border = NA)
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
abline(v = 0)
abline(h = results$persPars[rowIndex, d])
axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
if (sum(toPlot$x == -1) == 1) {
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1,]), pos = 4, cex = .5)
} else if (sum(toPlot$x == -1) > 1) {
text(-1, sort(toPlot$thres[toPlot$x == -1]),
labels = row.names(toPlot)[order(toPlot$thres)[toPlot$x == -1]],
pos = c(2, 4), cex = .5)
}
text(x = 1, y = sort(toPlot$thres[toPlot$x == 1]),
labels = row.names(toPlot)[order(toPlot$thres)[toPlot$x == 1]],
pos = c(2, 4), cex = .5)
devtools::load_all()
rm(list=ls())
load("C:/Users/Amy/OneDrive/Development/crasch/.RData")
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
rm(AMY)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
save.image("C:/Users/Amy/OneDrive/Development/crasch/.RData")
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
KIDMAP(AMY, personID = 131)
KIDMAP(AMY, personID = "131")
as.character)(131)
as.character(131)
as.character("131")
