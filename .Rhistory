4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5,
byrow = TRUE)
devtools::test()
devtools::test()
as.matrix(item.scores(SUP)$SUP$counts)
is.na(as.matrix(item.scores(SUP)$SUP$counts))
as.matrix(item.scores(SUP)$SUP$counts) ==
matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5, byrow = TRUE))
as.matrix(item.scores(SUP)$SUP$counts) ==
matrix(c(1, NA,  3, 17, 17,
3,  3,  1, 12, 18,
1,  4, 11,  9, 13,
2,  0,  9, 20,  7,
4, 13,  4,  6,  3,
5, NA,  1, 13, 12,
1,  2,  7, 18,  2,
4,  2, NA, 16, 10,
2,  3,  7,  8, 10,
1,  3,  8,  6,  3,
1,  0,  2,  6, 12,
1, NA,  8, 11, NA,
5, NA, 11,  5, NA,
2,  1,  0,  0, 17,
3,  4,  6,  5,  2
), nrow = 15, ncol = 5, byrow = TRUE)
devtools::test()
class(item.scores(SUP)$SUP$counts)
class(as.matrix(item.scores(SUP)$SUP$counts))
?table
class(as.data.frame(item.scores(SUP)$SUP$counts))
devtools::test()
devtools::test()
matrix(item.scores(SUP)$SUP$counts)
devtools::test()
devtools::test()
bad <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = NULL, estPackage = "TAM", retainOrig = FALSE,
consecutive = FALSE, writeout = FALSE)
?item.scores
item.scores(AMYwide))
item.scores(AMYwide)
devtools::load_all()
item.scores(AMYwide)
devtools::load_all()
item.scores(AMYwide)
?item.scores
use_data(AMY)
devtools::use_data(AMY)
devtools::use_data(SUP)
rm(list=ls())
devtools::test()
item.scores(AMY, dim = 2)
names(AMY)
devtools::load_all()
devtools::test()
SUP
item.scores(SUP)
devtools::test()
round(0.12500000,2)
devtools::test()
?pers.hist
devtools::test()
devtools::test()
devtools::test()
KIDMAP(AMY)
KIDMAP(AMY, personID = 112)
KIDMAP(AMY, personID = 112)
KIDMAP(SUP, personID = "1")
?infit.MNSQ
infit.MNSQ(SUP, writeout = FALSE)
infit.MNSQ(SUP, dim = 2)
infit.MNSQ(AMY, itemOrder = c(1:32))
infit.MNSQ(SUP, params = "steps")
infit.MNSQ(AMY, params = "steps")
infit.MNSQ(AMY, itemOrder = c(1:4, 10:12))
devtools::test()
devtools::test()
KIDMAP(SUP, personID = "112", writeout = FALSE)
KIDMAP(SUP, personID = 112, writeout = FALSE)
KIDMAP(SUP, personID = 112, dim = 2)
KIDMAP(SUP, personID = "112", writeout = FALSE)
SUP$persFit
KIDMAP(AMY, personID = 101)
KIDMAP(AMY, personID = 102)
KIDMAP(AMY, personID = 112)
KIDMAP(SUP, personID = "110")
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::test()
devtools::use_data(SUP, overwrite = TRUE)
rm(SUP)
devtools::test()
?devtools::test
devtools::load_all()
?pers.hist
pers.hist(SUP, palette = c("pink", "green"))
?KIDMAP
KIDMAP(SUP, personID = 112, palette = c("lightgreen", "lightpink", "black"))
KIDMAP(SUP, personID = 112, probBounds = c(.8, .2))
?pers.hist
pers.hist(SUP, palette = c("red"))
?infit.MNSQ
infit.MNSQ(AMY, palette = c("lightyellow", "grey", "lightpink"))
infit.MNSQ(SUP, palette = "PuBu")
infit.MNSQ(SUP, palette = c("lightpink", "pink"))
infit.MNSQ(SUP, palette = c("lightpink", "darkpink"))
infit.MNSQ(SUP, palette = c("lightpink", "black"))
devtools::load_all()
load("~/OneDrive/Development/crasch/data/AMY.rda")
item.analysis(AMY)
devtools::load_all()
devtools::document()
devtools::load_all()
?item.analysis
item.analysis(AMY)
?message
devtools::load_all()
item.analysis(AMY)
item.analysis(AMY)[[2]]$count
item.analysis(AMY)[[2]]$Count
AMYwide
apply(AMYwide, 2, table)
c(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count
vector(apply(AMYwide, 2, table))
?vector
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count==
unlist(apply(AMYwide, 2, table))
length(unlist(apply(AMYwide, 2, table)))
length(item.analysis(AMY)[[2]]$Count)
item.analysis(AMY)
item.analysis(AMY)[[2]]$Count
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count == unlist(apply(AMYwide,2,table))
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0]==
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0]
length(item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0])
length(unlist(apply(AMYwide, 2, table)))
unlist(apply(AMYwide, 2, table))
cbind(unlist(apply(AMYwide, 2, table)), item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0])
test = cbind(unlist(apply(AMYwide, 2, table)), item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0])
View(test)
table(AMYwide[,9])
View(AMYwide)
table(AMYwide[,5])
item.analysis(AMY)
AMY$itemInfo
which(!(AMYitem$item.name %in% colnames(AMYwide)))
which(!(AMYitem$item.name != colnames(AMYwide)))
AMYitem$item.name
colnames(AMYwide)
which(AMYitem$item.name != colnames(AMYwide))
AMYwide <- read.csv("~/OneDrive/Development/crasch/sample data files/AMYwide.csv")
AMYwide <- read.csv("~/OneDrive/Development/crasch/sample data files/M2 - amy/AMYwide.csv")
devtools::load_all()
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
use_data(AMYwide, overwrite = TRUE)
devtools::use_data(AMYwide, overwrite = TRUE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
View(AMYwide)
row.names(AMYwide) <- AMYwide[,1]
AMYwide <- AMYwide[,-1]
View(AMYwide)
use_data(AMYwide,overwrite=TRUE)
devtools::use_data(AMYwide,overwrite=TRUE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMYitem
devtools::load_all()
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::use_data(AMY, overwrite = TRUE)
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0]==
unlist(apply(AMYwide, 2, table))
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
devtools::use_data(SUP, overwrite = TRUE)
devtools::use_data(ADP, overwrite = TRUE)
ADP$itemPars
which(AMY$itemInfo$cons.ID == ADP$itemInfo$cons.ID)
AMY$itemInfo$cons.ID
ADP$itemInfo$cons.ID
View(itemInfo)
View(AMY$itemInfo)
View(ADP$itemInfo)
ADProws = which(AMY$itemInfo$cons.ID == 22)
SUProws = which(AMY$itemInfo$cons.ID == 11)
AMY$itemPars[ADProws,] == ADP$itemPars
AMY$itemPars[ADProws,]
ADP$itemPars
?testthat::expect_equal
AMY$itemPars[ADProws,],2) == round(ADP$itemPars),2)
round(AMY$itemPars[ADProws,],2) == round(ADP$itemPars,2)
AMY$itemPars[ADProws,] - ADP$itemPars
AMY$itemPars[ADProws,] - ADP$itemPars < .1
AMY$itemPars[ADProws,] - ADP$itemPars < ..01
AMY$itemPars[ADProws,] - ADP$itemPars < .01
AMY$itemPars[SUProws,] - SUP$itemPars < .01
names(AMY)
AMY$itemSEs[ADProws,] - ADP$itemSEs <.01
AMY$itemThres[ADProws,]-ADP$itemThres<.01
AMY$itemFit
AMY$itemFit[ADProws,] - ADP$itemFit <.01
ADP$itemFit
SUP$itemFit
AMY$itemFit[ADProws,] - ADP$itemFit[1:13]
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,]
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,] < .01
AMY$persPars[,1]
AMY$persPars
SUP$persPars
AMY$persPars[,2] - ADP$persPars < .01
AMY$persSEs[,1]- ADP$persSEs<.01
AMY$persSEs[,2]- ADP$persSEs<.01
AMY$persMax[,1]- SUP$persMax<.01
AMY$persFit
SUP$persFit
AMY$persFit[[2]]-ADP$persFit[[1]]<.01
AMY$popDist
SUP$popDist
AMY$popDist$mean[2]- ADP$popDist$mean
AMY$popDist$var.cov[2,2]-ADP$popDist$var.cov
AMY$sepRel
ADP$sepRel
AMY$sepRel[2]- ADP$selRel
AMY$sepRel[2]- ADP$sepRel
AMY$estSummary
AMY$classicalStats
SUP$classicalStats
AMY$classicalStats$ADP-ADP$classicalStats$ADP<.01
AMY$classicalStats$ADP
ADP$classicalStats$ADP
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
AMY$classicalStats$ADP[-1,]
ADP$classicalStats$ADP[-1,]
data1 <- AMY$wide
itemInfo1 <- AMYitem
data1 <- AMYwide
consInfo1 <- AMYcons
sepRel1 <- AMY$sepRel
data2 <- SUPwide
rm(data1,data2,sepRel1,itemInfo1,consInfo1)
rm(test)
data1 <- AMY$scoresRecoded
data2 <- SUP$scoresRecoded
itemInfo1 <- AMY$itemInfo
itemInfo2 <- SUP$itemInfo
consInfo1 <- AMY$consInfo
consInfo2 <- SUP$consInfo
sepRel1 <- AMY$sepRel
sepRel2 <- SUP$sepRel
output1 = list()
D1 = nrow(consInfo1)
N1 = nrow(data1)
output2 = list()
D2 = nrow(consInfo2)
N2 = nrow(data2)
dataMiss1 <- data1[, itemInfo1$cons.ID == consInfo1$cons.ID[1] ]
dataMiss2 <- data2[, itemInfo2$cons.ID == consInfo2$cons.ID[1] ]
dataMiss1
dataMiss2 == dataMiss1
dataMiss1[is.na(data1[, itemInfo1$cons.ID == consInfo$1cons.ID[1] ])] = 0
dataMiss1[is.na(data1[, itemInfo1$cons.ID == consInfo1$cons.ID[1] ])] = 0
dataMiss2[is.na(data2[, itemInfo2$cons.ID == consInfo2$cons.ID[1] ])] = 0
dataMiss1 == dataMiss2
inclItems1 <- which(itemInfo1$cons.ID == consInfo1$cons.ID[1])
inclItems2 <- which(itemInfo2$cons.ID == consInfo2$cons.ID[1])
inclItems1==inclItems2
inclItems1
inclItems2
I1 <- length(inclItems1)
I2 <- length(inclItems2)
I1==I2
dataComp1 <- data1[complete.cases(data1), inclItems1]
dataComp2 <- data2[complete.cases(data2), inclItems2]
dataComp1==dataComp2
dim(dataComp1)
dim(dataComp2)
View(dataComp1)
dataComp2
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
AMY$classicalStats$ADP[-1,]- ADP$classicalStats$ADP[-1,]<.01
AMY$classicalStats$ADP[-1,]
ADP$classicalStats$ADP[-1,]
AMY$empties[[ADProws]]
ADProws
AMY$empties
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0]
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count != 0] ==
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)
item.analysis(SUP)[[2]]$Count[item.analysis(SUP)[[2]]$Count!=0] ==
unlist(apply(SUPwide, 2, table))
item.analysis(AMY)[[1]]$Count +
item.analysis(AMY)[[1]]$Missing
AMY$estSummary$I
AMY$estSummary$N
item.analysis(AMY)[[2]]$Score
diff(item.analysis(AMY)[[2]]$Score)
AMY$consInfo$short.name
?match
match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)
AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
item.analysis(AMY)[[1]]$Construct, AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
item.analysis(AMY)[[1]]$Construct== AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID, AMY$consInfo$cons.ID)]
devtools::load_all()
devtools::test()
AMY$popDist$var.cov[1,1]
SUP$popDist$var.cov
devtools::load_all()
devtools::test()
all.equal(AMY$popDist$mean[2], ADP$popDist$mean, tolerance = .01)
?all.equal
devtools::load_all()
devtools::test()
AMY$itemPars[ADProws,]- ADP$itemPars<.01
devtools::test()
devtools::test()
devtools::test()
AMY$itemFit[ADProws,]- ADP$itemFit[1:13,] <.01
apply(AMY$itemFit[ADProws,], 2, class)
apply(ADP$itemFit[1:13,], 2, class)
devtools::test()
as.numeric(AMY$itemFit[ADProws,])
matrix(as.numeric(AMY$itemFit[ADProws,]))
class(AMY$itemFit[ADProws,])
as.matrix(AMY$itemFit[ADProws,])
as.matrix(AMY$itemFit[ADProws,-1])
apply(as.matrix(AMY$itemFit[ADProws,-1]), 2, class)
as.matrix(ADP$itemFit[1:13, -1])
devtools::test()
as.matrix(AMY$itemFit[ADProws, -1])-as.matrix(ADP$itemFit[1:13, -1])<.01
as.matrix(AMY$itemFit[ADProws, -1])-as.matrix(ADP$itemFit[1:13, -1])
devtools::test()
s.matrix(AMY$itemFit[SUProws, -1])
as.matrix(AMY$itemFit[SUProws, -1])
length(SUProws)
devtools::test()
devtools::test()
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.01
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.1
as.matrix(AMY$itemFit[SUProws, -1])-
as.matrix(SUP$itemFit[1:15, -1])<.2
ADP$itemFit[1:13, ]
as.matrix(ADP$itemFit[1:13, c(2,6)])
devtools::test()
as.matrix(AMY$itemFit[ADProws, c(2,6)])-
as.matrix(ADP$itemFit[1:13, c(2,6)])<.01
as.matrix(AMY$itemFit[SUProws, c(2,6)])-
as.matrix(SUP$itemFit[1:15, c(2,6)])<.01
as.matrix(SUP$itemFit[1:15,]
)
as.matrix(SUP$itemFit[1:15, c(2,6)])
class(as.matrix(SUP$itemFit[1:15, c(2,6)]))
apply(as.matrix(SUP$itemFit[1:15, c(2,6)]),2,class)
devtools::load_all()
devtools::test()
AMY$persPars[,2]
ADP$persPars
class(AMY$persPars[,2])
class(ADP$persPars)
devtools::test()
as.numeric(ADP$persPars)
matrix(ADP$persPars)
as.matrix(matrix(ADP$persPars))
as.matrix(ADP$persPars)
devtools::test()
AMY$persPars[,1]- as.matrix(SUP$persPars)<.01
c(as.matrix(SUP$persPars))
devtools::test()
as.matrix(AMY$itemFit[ADProws, c(2,6)])
as.matrix(ADP$itemFit[1:13, c(2,6)])
as.matrix(AMY$itemFit[SUProws, c(2,6)])
as.matrix(SUP$itemFit[1:15, c(2,6)])
devtools::test()
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)]))<.01
c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)]))
abs(c(as.matrix(AMY$itemFit[SUProws, c(2,6)]))-
c(as.matrix(SUP$itemFit[1:15, c(2,6)])))<.01
devtools::test()
AMY$persSEs[,2]
ADP$persSEs
devtools::test()
devtools::test()
devtools::test()
AMY$persFit[[2]]
ADP$persFit[[1]]
devtools::test()
AMY$popDist$mean[2]
ADP$popDist$mean
class(AMY$popDist$mean[2])
class(ADP$popDist$mean)
as.numeric(ADP$popDist$mean)
devtools::test()
devtools::test()
devtools::test()
AMY$sepRel[2]
devtools::test()
devtools::test()
