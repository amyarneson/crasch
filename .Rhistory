if (is.null(dim)) {
D <- 1:results$estSummary$D
} else {
D <- dim
}
for (d in D) {
cons <- results$consInfo[d,]
I <- sum(results$itemInfo$cons.ID == cons$cons.ID)
scores <- reshape(data.frame(as.matrix(results$scoresOrig[,
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])),
varying = list(1:I), idvar = "person",
direction = "long", timevar = "item", v.names = "score")
# replace score values with score names
K <- ncol(cons) - 3
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
dimnames(tograph) <- list(cons[4:ncol(cons)][sort(unique(scores$score))],
results$itemInfo$item.name[
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])
if (length(palette) == 1) {
if ( palette %in% row.names(brewer.pal.info) ) {
# check that there are enough colors in palette
if ( K <= RColorBrewer::brewer.pal.info$maxcolors[
which(row.names(RColorBrewer::brewer.pal.info) == palette)] ) {
color = RColorBrewer::brewer.pal(K, palette)
} else {
stop('Too many levels for chosen palette. Choose a different palette.')
}
} else if ( palette == "grey" | palette == "gray" ) {
color = gray(level = rev(1:nrow(tograph)/nrow(tograph)))
} else if ( palette == "BASS" ) {
color = rainbow(n = nrow(tograph), start = 4/6, end = 4/6+.001,
alpha = seq(.3,.9,length.out = nrow(tograph)))
} else {
stop('Invalid palette argument.')
}
} else {
stop('Invalid palette argument.')
}
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
# replace 0 counts with NAs if level was not possible for that item
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp[[2]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
tables[[which(D==d)]] <- table.temp
if (writeout) {
if (length(D) == 1) {
dd = NULL
} else {
dd = d
}
graphout = paste0("itemscores", dd, fileSuffix, ".", imageType)
tableout = paste0("itemscores", dd, fileSuffix, ".csv")
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
blankrow = c("Proportions", rep("", ncol(table.temp[[1]])-1))
write.table("Proportions", tableout, sep = ",", append = TRUE,
col.names=FALSE)
write.table(table.temp[[2]], tableout, sep = ",",
append = TRUE, col.names = FALSE)
eval(parse(text=paste0(imageType, "('", graphout, "')")))
}
layout(matrix(1:2, nrow = 2), heights = c(5, 1))
par(xpd = TRUE)
par(mar = c(2, 4, 4, 2) + 0.1)
barplot(cbind(tograph[,seq(ncol(tograph), 1, -1)]),
col = color, horiz = TRUE, las = 1,
main = paste0(cons$short.name,", Scores by Item"))
par(mar = c(2,0,0,0))
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(-10, 10),
ylim = c(-10, 10))
legend(x = "center", xjust = .5, legend = row.names(tograph), pch = 22,
col = "black", pt.bg = color, horiz = TRUE, pt.cex = 2, bty = "n",
text.width = 10/nrow(tograph))
# text.width uses 10 because the plot I created is 20 wide & must account
#   for size of boxes. Hopefully this will work for a reasonable number
#   of levels.
if (writeout) {
dev.off()
}
}
dev.off()
cons <- results$consInfo[d,]
I <- sum(results$itemInfo$cons.ID == cons$cons.ID)
scores <- reshape(data.frame(as.matrix(results$scoresOrig[,
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])),
varying = list(1:I), idvar = "person",
direction = "long", timevar = "item", v.names = "score")
K <- ncol(cons) - 3
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
dimnames(tograph) <- list(cons[4:ncol(cons)][sort(unique(scores$score))],
results$itemInfo$item.name[
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])
if (length(palette) == 1) {
if ( palette %in% row.names(brewer.pal.info) ) {
# check that there are enough colors in palette
if ( K <= RColorBrewer::brewer.pal.info$maxcolors[
which(row.names(RColorBrewer::brewer.pal.info) == palette)] ) {
color = RColorBrewer::brewer.pal(K, palette)
} else {
stop('Too many levels for chosen palette. Choose a different palette.')
}
} else if ( palette == "grey" | palette == "gray" ) {
color = gray(level = rev(1:nrow(tograph)/nrow(tograph)))
} else if ( palette == "BASS" ) {
color = rainbow(n = nrow(tograph), start = 4/6, end = 4/6+.001,
alpha = seq(.3,.9,length.out = nrow(tograph)))
} else {
stop('Invalid palette argument.')
}
} else {
stop('Invalid palette argument.')
}
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp[[2]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
tables[[which(D==d)]] <- table.temp
if (writeout) {
if (length(D) == 1) {
dd = NULL
} else {
dd = d
}
graphout = paste0("itemscores", dd, fileSuffix, ".", imageType)
tableout = paste0("itemscores", dd, fileSuffix, ".csv")
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
blankrow = c("Proportions", rep("", ncol(table.temp[[1]])-1))
write.table("Proportions", tableout, sep = ",", append = TRUE,
col.names=FALSE)
write.table(table.temp[[2]], tableout, sep = ",",
append = TRUE, col.names = FALSE)
eval(parse(text=paste0(imageType, "('", graphout, "')")))
}
dev.off()
if (length(D) == 1) {
dd = NULL
} else {
dd = d
}
graphout = paste0("itemscores", dd, fileSuffix, ".", imageType)
tableout = paste0("itemscores", dd, fileSuffix, ".csv")
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
?write.table
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA,
blankrow = c("Proportions", rep("", ncol(table.temp[[1]])-1)))
table.temp[[1]]
tableout
tableout
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
t
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp
table.temp[[2]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp
tables[[which(D == d)]] <- table.temp
tables
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
class(table.temp[[1]])
class(toGraph)
class(tograph)
matrix(toGraph)
matrix(tograph)
as.matrix(tograph)
table.temp <- list(counts = as.matrix(t(tograph)),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
table.temp[[2]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]] = NA
tables[[which(D == d)]] <- table.temp
layout(matrix(1:2, nrow = 2), heights = c(5, 1))
par(xpd = TRUE)
par(mar = c(2, 4, 4, 2) + 0.1)
barplot(cbind(tograph[,seq(ncol(tograph), 1, -1)]),
col = color, horiz = TRUE, las = 1,
main = paste0(cons$short.name,", Scores by Item"))
par(mar = c(2,0,0,0))
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(-10, 10),
ylim = c(-10, 10))
legend(x = "center", xjust = .5, legend = row.names(tograph), pch = 22,
col = "black", pt.bg = color, horiz = TRUE, pt.cex = 2, bty = "n",
text.width = 10/nrow(tograph))
names(tables) = results$consInfo$short.name[D]
tables
item.scores(results)
!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID
,
6:ncol(results$itemInfo)]
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]]
!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]
!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)]*1
as.numeric(!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)])
table.temp[[1]] / as.numeric(!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)])
table.temp[[1]]
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]]
table.temp[[1]] / as.numeric(!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)])
dim(table.temp[[1]])
dim(!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:ncol(results$itemInfo)])
results$itemInfo[d, ]
results$itemInfo[d, 6:ncol(results$itemInfo)]
is.na(results$itemInfo[d,])
!is.na(results$itemInfo[d,])
sum(!is.na(results$itemInfo[d,]))
!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:sum(!is.na(results$itemInfo[d,]))]
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
# replace 0 counts with NAs if level was not possible for that item
table.temp[[1]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:sum(!is.na(results$itemInfo[d,]))]] = NA
table.temp[[2]][!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:sum(!is.na(results$itemInfo[d,]))]] = NA
table.temp
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
dim(!results$itemInfo[results$itemInfo$cons.ID == cons$cons.ID,
6:sum(!is.na(results$itemInfo[d,]))])
dim(table.temp[[1]])
table.temp[[1]]
scores
table(scores$score)
View(results$consInfo)
cons <- results$consInfo[d,]
I <- sum(results$itemInfo$cons.ID == cons$cons.ID)
scores <- reshape(data.frame(as.matrix(results$scoresOrig[,
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])),
varying = list(1:I), idvar = "person",
direction = "long", timevar = "item", v.names = "score")
K <- ncol(cons) - 3
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
dimnames(tograph) <- list(cons[4:ncol(cons)][sort(unique(scores$score))],
results$itemInfo$item.name[
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])
tograph
if (length(palette) == 1) {
if ( palette %in% row.names(brewer.pal.info) ) {
# check that there are enough colors in palette
if ( K <= RColorBrewer::brewer.pal.info$maxcolors[
which(row.names(RColorBrewer::brewer.pal.info) == palette)] ) {
color = RColorBrewer::brewer.pal(K, palette)
} else {
stop('Too many levels for chosen palette. Choose a different palette.')
}
} else if ( palette == "grey" | palette == "gray" ) {
color = gray(level = rev(1:nrow(tograph)/nrow(tograph)))
} else if ( palette == "BASS" ) {
color = rainbow(n = nrow(tograph), start = 4/6, end = 4/6+.001,
alpha = seq(.3,.9,length.out = nrow(tograph)))
} else {
stop('Invalid palette argument.')
}
} else {
stop('Invalid palette argument.')
}
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]]
View(results$itemInfo)
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
tograph
if (length(palette) == 1) {
if ( palette %in% row.names(brewer.pal.info) ) {
# check that there are enough colors in palette
if ( K <= RColorBrewer::brewer.pal.info$maxcolors[
which(row.names(RColorBrewer::brewer.pal.info) == palette)] ) {
color = RColorBrewer::brewer.pal(K, palette)
} else {
stop('Too many levels for chosen palette. Choose a different palette.')
}
} else if ( palette == "grey" | palette == "gray" ) {
color = gray(level = rev(1:nrow(tograph)/nrow(tograph)))
} else if ( palette == "BASS" ) {
color = rainbow(n = nrow(tograph), start = 4/6, end = 4/6+.001,
alpha = seq(.3,.9,length.out = nrow(tograph)))
} else {
stop('Invalid palette argument.')
}
} else {
stop('Invalid palette argument.')
}
head(scores)
table(scores$item)
results$scoresOrig
tograph
colnames(tograph) <-  results$itemInfo$item.name[which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])]
tograph
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
table.temp[[1]]
which(results$itemInfo$item.name == row.names(table.temp[[1]][1]))
which(results$itemInfo$item.name == rownames(table.temp[[1]][1]))
results$itemInfo$item.name
rownames(table.temp[[1]][1])
dimnames(table.temp[[1]])
rownames(table.temp[[1]])
match(rownames(table.temp[[1]]), results$itemInfo$item.name)
results$itemInfo[match(rownames(table.temp[[1]]), results$itemInfo$item.name),
6:nrow(itemInfo)]
results$itemInfo[match(rownames(table.temp[[1]]), results$itemInfo$item.name),
6:nrow(results$itemInfo)]
colnames(table.temp[[1]])
as.numeric(colnames(table.temp[[1]]))
results$itemInfo[match(rownames(table.temp[[1]]), results$itemInfo$item.name),
6:nrow(results$itemInfo)[as.numeric(colnames(table.temp[[1]]))]]
6:nrow(results$itemInfo)[as.numeric(colnames(table.temp[[1]]))]
results$itemInfo[match(rownames(table.temp[[1]]), results$itemInfo$item.name),
as.numeric(colnames(table.temp[[1]])) + 5]
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
replaceCells <- results$itemInfo[match(rownames(table.temp[[1]]),
results$itemInfo$item.name),
as.numeric(colnames(table.temp[[1]])) + 5]
table.temp[[1]][replaceCells] = NA
replaceCells
dim(replaceCells)
dim(table.temp[[1]])
table.temp[[1]][replaceCells]
class(table.temp[[1]])
table.temp <- list(counts = as.matrix(t(tograph)),
proportions = t(prop.table(tograph, margin = 2)))
replaceCells <- results$itemInfo[match(rownames(table.temp[[1]]),
results$itemInfo$item.name),
as.numeric(colnames(table.temp[[1]])) + 5]
table.temp[[1]][replaceCells] = NA
table.temp[[1]][replaceCells]
class(table.temp[[1]])
as.matrix(t(tograph))
class(as.matrix(t(tograph)))
class(matrix(t(tograph)))
matrix(t(tograph))
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
replaceCells <- results$itemInfo[match(rownames(table.temp[[1]]),
results$itemInfo$item.name),
as.numeric(colnames(table.temp[[1]])) + 5]
table.temp[[1]][replaceCells] = NA
table.temp[[1]] / as.numeric(replaceCells)
as.numeric(replaceCells)
replaceCells
replaceCells*1
table.temp[[1]] / (replaceCells*1)
table.temp[[1]] <- table.temp[[1]] / (replaceCells*1)
table.temp[[2]] <- table.temp[[2]] / (replaceCells*1)
tables[[which(D == d)]] <- table.temp
if (writeout) {
if (length(D) == 1) {
dd = NULL
} else {
dd = d
}
graphout = paste0("itemscores", dd, fileSuffix, ".", imageType)
tableout = paste0("itemscores", dd, fileSuffix, ".csv")
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
blankrow = c("Proportions", rep("", ncol(table.temp[[1]])-1))
write.table("Proportions", tableout, sep = ",", append = TRUE,
col.names=FALSE)
write.table(table.temp[[2]], tableout, sep = ",",
append = TRUE, col.names = FALSE)
eval(parse(text=paste0(imageType, "('", graphout, "')")))
}
layout(matrix(1:2, nrow = 2), heights = c(5, 1))
par(xpd = TRUE)
par(mar = c(2, 4, 4, 2) + 0.1)
barplot(cbind(tograph[,seq(ncol(tograph), 1, -1)]),
col = color, horiz = TRUE, las = 1,
main = paste0(cons$short.name,", Scores by Item"))
par(mar = c(2,0,0,0))
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(-10, 10),
ylim = c(-10, 10))
legend(x = "center", xjust = .5, legend = row.names(tograph), pch = 22,
col = "black", pt.bg = color, horiz = TRUE, pt.cex = 2, bty = "n",
text.width = 10/nrow(tograph))
if (writeout) {
dev.off()
}
for (d in D) {
cons <- results$consInfo[d,]
I <- sum(results$itemInfo$cons.ID == cons$cons.ID)
scores <- reshape(data.frame(as.matrix(results$scoresOrig[,
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])),
varying = list(1:I), idvar = "person",
direction = "long", timevar = "item", v.names = "score")
# replace score values with score names
K <- ncol(cons) - 3
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
colnames(tograph) <-results$itemInfo$item.name[which(
results$itemInfo$cons.ID == results$consInfo$cons.ID[d])]
#dimnames(tograph) <- list(cons[4:ncol(cons)][sort(unique(scores$score))],
#                          results$itemInfo$item.name[
#            which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])
if (length(palette) == 1) {
if ( palette %in% row.names(brewer.pal.info) ) {
# check that there are enough colors in palette
if ( K <= RColorBrewer::brewer.pal.info$maxcolors[
which(row.names(RColorBrewer::brewer.pal.info) == palette)] ) {
color = RColorBrewer::brewer.pal(K, palette)
} else {
stop('Too many levels for chosen palette. Choose a different palette.')
}
} else if ( palette == "grey" | palette == "gray" ) {
color = gray(level = rev(1:nrow(tograph)/nrow(tograph)))
} else if ( palette == "BASS" ) {
color = rainbow(n = nrow(tograph), start = 4/6, end = 4/6+.001,
alpha = seq(.3,.9,length.out = nrow(tograph)))
} else {
stop('Invalid palette argument.')
}
} else {
stop('Invalid palette argument.')
}
table.temp <- list(counts = t(tograph),
proportions = t(prop.table(tograph, margin = 2)))
# replace 0 counts with NAs if level was not possible for that item
replaceCells <- results$itemInfo[match(rownames(table.temp[[1]]),
results$itemInfo$item.name),
as.numeric(colnames(table.temp[[1]])) + 5]
table.temp[[1]] <- table.temp[[1]] / (replaceCells*1)
table.temp[[2]] <- table.temp[[2]] / (replaceCells*1)
tables[[which(D == d)]] <- table.temp
if (writeout) {
if (length(D) == 1) {
dd = NULL
} else {
dd = d
}
graphout = paste0("itemscores", dd, fileSuffix, ".", imageType)
tableout = paste0("itemscores", dd, fileSuffix, ".csv")
write.table(table.temp[[1]], tableout, sep = ",", col.names = NA)
blankrow = c("Proportions", rep("", ncol(table.temp[[1]])-1))
write.table("Proportions", tableout, sep = ",", append = TRUE,
col.names=FALSE)
write.table(table.temp[[2]], tableout, sep = ",",
append = TRUE, col.names = FALSE)
eval(parse(text=paste0(imageType, "('", graphout, "')")))
}
layout(matrix(1:2, nrow = 2), heights = c(5, 1))
par(xpd = TRUE)
par(mar = c(2, 4, 4, 2) + 0.1)
barplot(cbind(tograph[,seq(ncol(tograph), 1, -1)]),
col = color, horiz = TRUE, las = 1,
main = paste0(cons$short.name,", Scores by Item"))
par(mar = c(2,0,0,0))
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", xlim = c(-10, 10),
ylim = c(-10, 10))
legend(x = "center", xjust = .5, legend = row.names(tograph), pch = 22,
col = "black", pt.bg = color, horiz = TRUE, pt.cex = 2, bty = "n",
text.width = 10/nrow(tograph))
# text.width uses 10 because the plot I created is 20 wide & must account
#   for size of boxes. Hopefully this will work for a reasonable number
#   of levels.
if (writeout) {
dev.off()
}
}
par(origPar)
names(tables) = results$consInfo$short.name[D]
return(tables)
item.scores(ADM3consecutive)
devtools::load_all()
item.scores(ADM3consecutive)
