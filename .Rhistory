paste(paste("    ",itemInfo$item.name[dropped]," (",
itemInfo$item.ID[dropped],")",sep=""),collapse="\n"),
"\n")
itemInfo = itemInfo[-dropped,]
wide = wide[,-dropped]
}
length(dropped) > 0
devtools::load_all()
dropped = noVar(wide)
if (length(dropped) > 0) {
warning(length(dropped),
" item(s) showed no response variability and were dropped from analysis:\n",
paste(paste("    ",itemInfo$item.name[dropped]," (",
itemInfo$item.ID[dropped],")",sep=""),collapse="\n"),
"\n")
itemInfo = itemInfo[-dropped,]
wide = wide[,-dropped]
}
test = craschR(wide, itemInfo = item, consInfo = cons, writeout = FALSE)
View(scores)
View(itemInfo)
View(item)
View(scores)
which(!(item$item.name %in% row.names(scores)))
which(!(item$item.name %in% colnames(scores)))
rm(list=ls())
cons = read.csv("C:/Users/Amy/Desktop/Emily/bugs/ArgCons.csv", stringsAsFactors = FALSE)
item = read.csv("C:/Users/Amy/Desktop/Emily/bugs/ARGitems.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Emily/bugs/ARGwide.csv", row.names = 1, stringsAsFactors = FALSE)
devtools::load_all()
craschR(wide, itemInfo = item, consInfo = cons)
craschR(scores, itemInfo = item, consInfo = cons)
devtools::load_all()
craschR(scores, itemInfo = item, consInfo = cons)
devtools::load_all()
craschR(scores, itemInfo = item, consInfo = cons)
devtools::load_all()
craschR(scores, itemInfo = item, consInfo = cons)
devtools::load_all()
craschR(scores, itemInfo = item, consInfo = cons)
test <- craschR(scores, itemInfo = item, consInfo = cons)
test <- craschR(scores, itemInfo = item, consInfo = cons, consecutive = TRUE)
View(item)
View(cons)
results = test
item.scores(test)
results = test
dim = NULL
freqs = TRUE
palette = "BASS"
writeout = FALSE
checkResults(results)
checkDim(dim, results$consInfo)
origPar = par(no.readonly = TRUE) # so graphical parameters can be reset after
par(mai=c(1.36,1.093333,1.093333,0.56),
mar=c(5.1,4.1,4.1,2.1),
xpd=FALSE)
tables <- list()
table(results$scoresOrig)
View(scoresOrig)
View(results$scoresOrig)
table(c(results$scoresOrig))
as.vector(scoresOrig)
as.vector(results$scoresOrig)
if (is.null(dim)) {
D <- 1:results$estSummary$D
} else {
D <- dim
}
D
d = 1
cons <- results$consInfo[d,]
I <- sum(results$itemInfo$cons.ID == cons$cons.ID)
scores <- reshape(data.frame(as.matrix(results$scoresOrig[,
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])),
varying = list(1:I), idvar = "person",
direction = "long", timevar = "item", v.names = "score")
View(scores)
table(scores$score)
unique(scores$score)
order(unique(scores$score))
sort(unique(scores$score))
K <- ncol(cons) - 3
if ( freqs ) {
tograph <- table(scores$score, scores$item, useNA="no")
} else {
tograph <- prop.table(table(scores$score, scores$item, useNA="no"),
margin = 2)
}
dimnames(tograph) <- list(cons[4:ncol(cons)][sort(unique(scores$score))],
results$itemInfo$item.name[
which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])])
toGraph
tograph
devtools::load_all()
item.scores(test)
devtools::build()
devtools::load_all()
?KIDMAP
ADP$persPars
KIDMAP(ADP, 110:147)
results = ADP
personID = 147
probBounds = c(.25, .75)
dim = NULL
palette = "BASS"
checkResults(results)
checkDim(dim, results$consInfo)
if (!(all(as.character(personID) %in% row.names(results$scoresOrig)) &
(is.character(personID) | is.numeric(personID)))) {
stop('Invalid personID argument.')
}
if (!(is.numeric(probBounds) &
length(probBounds) == 2 &
all(probBounds <= 1 & probBounds >= 0) &
(probBounds[1] < probBounds[2]))) {
stop('Invalid probBounds argument.')
}
origPar = par(no.readonly = TRUE) # to reset graphical parameters after
if (is.null(dim)) {
D <- 1:results$estSummary$D
} else if (is.numeric(dim)) {
D <- dim
} else {
stop('Invalid dim argument.')
}
if (identical(palette, "BASS")) {
color = c(expected = rgb(red = 128, green = 177, blue = 211, alpha = 127.5,
maxColorValue = 255),
surprise = rgb(red = 255, green = 229, blue = 0, alpha = 127.5,
maxColorValue = 255),
points = "#80b1d3")
} else if (length(palette) == 1) {
if (palette %in% row.names(brewer.pal.info)) {
color <- RColorBrewer::brewer.pal(3, palette)
} else {
stop('Invalid palette argument.')
}
} else if (all(areColors(palette)) & length(palette) == 3) {
color <- palette
} else {
stop('Invalid palette argument.')
}
rowIndex <- which(row.names(results$scoresRecoded) %in% as.character(personID))
d=1
inclItem <- which(results$itemInfo$cons.ID == results$consInfo$cons.ID[d])
thres <- results$itemThres[inclItem,]
View(thres)
rowIndex
i=38
respVector <- as.numeric(results$scoresRecoded[i,])
respVector
toPlot <- data.frame(x = rep(1, prod(dim(thres))),
thres = c(t(thres)),
step = rep(1:ncol(thres), length(inclItem)),
score = rep(respVector[inclItem], each = ncol(thres)) )
toPlot
row.names(toPlot) <- paste(rep(row.names(thres), each = ncol(thres)),
rep(1:ncol(thres), length(inclItem)), sep = "_")
toPlot = toPlot[complete.cases(toPlot),]
toPlot
toPlot$x[toPlot$step <= toPlot$score] = -1
toPlot
upBd = results$persPars[i, d] - log(probBounds[1] / (1 - probBounds[1]))
loBd = results$persPars[i, d] - log(probBounds[2] / (1 - probBounds[2]))
layout(matrix(1,  nrow = 1))
par(mai = c(1.02, 0.82, 0.82, 0.42), mar = c(5.1, 4.1, 5.3, 2.1))
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", row.names(results$scoresRecoded)[i],
"\nEst Theta: ", round(results$persPars[i, d], 2)),
side = 3, line = 0, cex = .8)
mtext(paste0("Raw: ", round(results$persRaw[i, d], 2), "/",
round(results$persMax[i, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[i], 2),
" (t=",round(results$persFit[[d]]$outfit_t[i], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[i], 2),
" (t=",round(results$persFit[[d]]$infit_t[i], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached", adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = color[1], border = NA)
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
abline(v = 0)
abline(h = results$persPars[i, d])
axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
toPlot
sum(toPlot$x == -1) == 1
sum(toPlot$x == -1) > 1
text(x = -1, y = sort(toPlot$thres[toPlot$x == -1]),
labels = row.names(toPlot)[order(toPlot$thres)[toPlot$x == -1]],
pos = c(2, 4), cex = .5)
View(toPlot)
sort(toPlot$thres[toPlot$x == -1])
row.names(toPlot)[order(toPlot$thres)[toPlot$x == -1]]
text(x = -1, y = toPlot$thres[toPlot$x == -1],
labels = row.names(toPlot)[toPlot$x == -1]],
pos = c(2, 4), cex = .5)
text(x = -1, y = toPlot$thres[toPlot$x == -1],
labels = row.names(toPlot)[toPlot$x == -1],
pos = c(2, 4), cex = .5)
sort(toPlot$thres[toPlot$x == -1])
order(toPlot$thres)[toPlot$x == -1]
toPlot[order(toPlot$thres)[toPlot$x == -1],]
row.names(toPlot)
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", row.names(results$scoresRecoded)[i],
"\nEst Theta: ", round(results$persPars[i, d], 2)),
side = 3, line = 0, cex = .8)
mtext(paste0("Raw: ", round(results$persRaw[i, d], 2), "/",
round(results$persMax[i, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[i], 2),
" (t=",round(results$persFit[[d]]$outfit_t[i], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[i], 2),
" (t=",round(results$persFit[[d]]$infit_t[i], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached", adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = color[1], border = NA)
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
abline(v = 0)
abline(h = results$persPars[i, d])
axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
if (sum(toPlot$x == -1) == 1) {
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1,]), pos = 4, cex = .5)
} else if (sum(toPlot$x == -1) > 1) {
text(x = -1, y = sort(toPlot$thres[toPlot$x == -1]),
labels = row.names(toPlot)[order(toPlot$thres[toPlot$x == -1])],
pos = c(2, 4), cex = .5)
}
if (sum(toPlot$x == 1) == 1) {
text(x = 1, y = toPlot$thres[toPlot$x == 1],
row.names(toPlot[toPlot$x == 1,]), pos = 2, cex = .5)
} else if (sum(toPlot$x == 1) > 1) {
text(x = 1, y = sort(toPlot$thres[toPlot$x == 1]),
labels = row.names(toPlot)[order(toPlot$thres[toPlot$x == 1])],
pos = c(2, 4), cex = .5)
}
toPlot[order(toPlot$thres)[toPlot$x == -1],]
toPlot[order(toPlot$thres[toPlot$x == -1]),]
toPlot[toPlot$x == -1,]
order(toPlot$thres[toPlot$x == -1,])
toPlot$thres[toPlot$x == -1,]
toPlot$thres[toPlot$x == -1]
order(toPlot$thres[toPlot$x == -1])
toPlot[toPlot$x == -1,][order(toPlot$thres[toPlot$x == -1]),]
row.names(toPlot)[toPlot$x == -1][order(toPlot$thres[toPlot$x == -1])]
plot(1, type = "n", xlim = c(-1.5, 1.5),
ylim = c(min(toPlot$thres, loBd) - .2, max(toPlot$thres, upBd) + .2),
axes = FALSE, xlab = "", ylab = "Logits", main = "KIDMAP")
mtext(paste0("Person: ", row.names(results$scoresRecoded)[i],
"\nEst Theta: ", round(results$persPars[i, d], 2)),
side = 3, line = 0, cex = .8)
mtext(paste0("Raw: ", round(results$persRaw[i, d], 2), "/",
round(results$persMax[i, d], 2),
"\nOutfit: ", round(results$persFit[[d]]$outfit[i], 2),
" (t=",round(results$persFit[[d]]$outfit_t[i], 2), ")",
"\nInfit: ", round(results$persFit[[d]]$infit[i], 2),
" (t=",round(results$persFit[[d]]$infit_t[i], 2), ")"),
side = 1, line = 2, cex = .7)
mtext("Reached", adj = 0)
mtext("Not Reached", adj = 1)
rect(xleft = -1.5, xright = 1.5, ybottom = loBd, ytop = upBd,
col = color[1], border = NA)
rect(xleft = -1.5, xright = 0, ybottom = upBd, ytop = 100,
col = color[2], border = NA)
rect(xleft = 0, xright = 1.5, ybottom = -100, ytop = loBd,
col = color[2], border = NA)
abline(v = 0)
abline(h = results$persPars[i, d])
axis(side = 2, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
axis(side = 4, at = c(seq(0, floor(min(toPlot$thres, loBd) - .2), by = -1),
seq(0, ceiling(max(toPlot$thres, upBd) + .2), by = 1)),
las = 1)
points(x = toPlot$x, y = toPlot$thres, pch = 21, bg = color[3])
if (sum(toPlot$x == -1) == 1) {
text(x = -1, y = toPlot$thres[toPlot$x == -1],
row.names(toPlot[toPlot$x == -1,]), pos = 4, cex = .5)
} else if (sum(toPlot$x == -1) > 1) {
text(x = -1, y = sort(toPlot$thres[toPlot$x == -1]),
labels = row.names(toPlot)[toPlot$x == -1][order(toPlot$thres[toPlot$x == -1])],
pos = c(2, 4), cex = .5)
}
if (sum(toPlot$x == 1) == 1) {
text(x = 1, y = toPlot$thres[toPlot$x == 1],
row.names(toPlot[toPlot$x == 1,]), pos = 2, cex = .5)
} else if (sum(toPlot$x == 1) > 1) {
text(x = 1, y = sort(toPlot$thres[toPlot$x == 1]),
labels = row.names(toPlot)[toPlot$x == 1][order(toPlot$thres[toPlot$x == 1])],
pos = c(2, 4), cex = .5)
}
devtools::load_all()
KIDMAP(SUP, 147)
?infit.MNSQ
devtools::build()
devtools::load_all()
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/EGCcons.csv", stringsAsFactors = FALSE)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/EGCitem.csv", sep = ",", stringsAsFactors = FALSE)
EGCscores = read.csv("C:/Users/Amy/Desktop/Khawla/EGCwide.csv", row.names = 1, stringsAsFactors = FALSE)
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ",", stringsAsFactors = FALSE)
EGCscores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
EGCanalysis = craschR(scores = EGCscores, itemInfo = EGCitem, consInfo = EGCcons)
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
View(EGCcons)
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ",", stringsAsFactors = FALSE)
EGCscores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
#View(EGCcons)
#View(EGCitem)
#View(EGCscores)
EGCanalysis = craschR(scores = EGCscores, itemInfo = EGCitem, consInfo = EGCcons)
View(EGCcons)
View(EGCitem)
View(EGCscores)
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE, sep = ";")
View(EGCcons)
EGCcons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE, sep = ";")
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ",", stringsAsFactors = FALSE, sep = ";")
EGCscores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE, sep = ";")
View(EGCcons)
View(EGCitem)
View(EGCscores)
View(EGCitem)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ",", stringsAsFactors = FALSE)
EGCanalysis = craschR(scores = EGCscores, itemInfo = EGCitem, consInfo = EGCcons)
View(EGCitem)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ";", stringsAsFactors = FALSE)
EGCanalysis = craschR(scores = EGCscores, itemInfo = EGCitem, consInfo = EGCcons)
View(EGCitem)
View(EGCscores)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", sep = ";", stringsAsFactors = FALSE)
EGCitem = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
View(EGCitem)
cons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE, sep = ";")
item = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE, sep = ";")
rm(EGCcons, EGCitem, EGCscores)
EGCanalysis = craschR(scores = EGCscores, itemInfo = EGCitem, consInfo = EGCcons)
EGCanalysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
View(item)
View(cons)
cons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
item = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
#View(EGCcons)
#View(EGCitem)
#View(EGCscores)
EGCanalysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
cons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
item = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
#View(EGCcons)
#View(EGCitem)
#View(EGCscores)
EGCanalysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
View(item)
View(scores)
cons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
item = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
#View(EGCcons)
#View(EGCitem)
#View(EGCscores)
EGCanalysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
View(cons)
View(item)
cons = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWcons.csv", stringsAsFactors = FALSE)
item = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWitem.csv", stringsAsFactors = FALSE)
scores = read.csv("C:/Users/Amy/Desktop/Khawla/DOGIWscores.csv", row.names = 1, stringsAsFactors = FALSE)
#View(EGCcons)
#View(EGCitem)
#View(EGCscores)
EGCanalysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
infit.MNSQ(EGCanalysis, params = "items")
rm(ECGanalysis)
rm(EGCanalysis)
analysis = craschR(scores = scores, itemInfo = item, consInfo = cons)
infit.MNSQ(analysis, params = "items")
wm(analysis)
KIDMAP(analysis, c(119, 121, 126))
View(cons)
rm(list=ls())
cons <- read.csv("C:/Users/Amy/Desktop/Laura/GC_cons.csv", stringsAsFactors = FALSE)
item <- read.csv("C:/Users/Amy/Desktop/Laura/GC_item.csv", stringsAsFactors = FALSE)
scores <- read.csv("C:/Users/Amy/Desktop/Laura/GC_wide.csv", row.names = 1, stringsAsFactors = FALSE)
View(cons)
View(item)
View(scores)
?craschR
test <- craschR(scores, item, cons, writeout = FALSE)
mn.traj(test)
?mn.traj
results = test
itemOrder = NULL
palette = "BASS"
writeout = FALSE
origPar <- par(no.readonly = TRUE) # to reset graphical parameters after
checkResults(results)
checkItemOrder(itemOrder, results$itemInfo)
if (is.null(itemOrder)) {
itemOrder <- 1:results$estSummary$I
}
itemInfo <- results$itemInfo[itemOrder,]
if (length(itemOrder == 1)) {
scoresRecoded <- data.frame(results$scoresRecoded[,itemOrder])
row.names(scoresRecoded) = row.names(results$scoresRecoded)
colnames(scoresRecoded) = colnames(results$scoresRecoded)[itemOrder]
} else {
scoresRecoded <- results$scoresRecoded[,itemOrder]
}
D <- which(results$consInfo$cons.ID %in% unique(itemInfo$cons.ID))
output <- list()
d = 1
inclItems <- itemInfo$cons.ID == results$consInfo$cons.ID[d]
meanLocs <- matrix(NA, nrow = sum(inclItems),
ncol = ncol(results$itemPars))
row.names(meanLocs) <- itemInfo$item.name[inclItems]
colnames(meanLocs) <- paste0("recodedScore", 0:(ncol(meanLocs) - 1))
sdLocs <- meanLocs
j <- 1
for (i in which(inclItems)) {
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
sdLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
j = j + 1
}
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
ncol(meanLocs)
sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))
test$empties
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs)))
}), rep(NA, ncol(meanLocs)))
c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
})
)
ncol(meanLocs)
?as.vector
as.vector(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), length = 3)
as.vector(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}))
as.vector(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
})[1:3], length = 3)
c(1,2)[1:4]
sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
})[1:ncol(meanLocs)]
devtools::load_all()
mn.traj(test)
rm(list=ls())
cons <- read.csv("C:/Users/Amy/Desktop/Laura/GC_cons.csv", stringsAsFactors = FALSE)
item <- read.csv("C:/Users/Amy/Desktop/Laura/GC_item.csv", stringsAsFactors = FALSE)
scores <- read.csv("C:/Users/Amy/Desktop/Laura/GC_wide.csv", row.names = 1, stringsAsFactors = FALSE)
test <- craschR(scores, item, cons, writeout = FALSE)
mn.traj(test)
devtools::build()
