consecutive = TRUE, writeout = FALSE)
class(persPars)
results = AMY
class(results$persPars)
head(persPars)
head(results$persPars)
pers <- apply(persPars, 2, function(x) { sort(unique(x)) })
pers <- apply(results$persPars, 2, function(x) { sort(unique(x)) })
head(pers)
tail(pers)
length(unique(results$persPars[,1]))
length(unique(results$persPars[,2]))
?apply
?lapply
dim = NULL
if (is.null(dim)) {
D <- 1:results$estSummary$D
} else if (is.numeric(dim)) {
D <- dim
}
list(pers)
lapply(D, function(x) { sort(unique(results$persPars[,x])) })
pers <- lapply(D, function(x) { sort(unique(results$persPars[,x])) })
results$itemInfo$consID
results$itemInfo$cons.ID
constructs <- sort(unique(results$itemInfo$consID))
constructs <- sort(unique(results$itemInfo$cons.ID))
constructs
constructs <- results$consInfo$cons.ID[D]
results$itemInfo$consID %in% constructs
results$itemInfo$cons.ID %in% constructs
itemInfo <- results$itemInfo[results$itemInfo$cons.ID %in% constructs, ]
itemInfo
rm(itemInfo)
rm(constructs)
color = "BASS"
origPar = par(no.readonly = TRUE) # so graphical parameters can be reset after
par(mai=c(1.36,1.093333,1.093333,0.56),
mar=c(5.1,4.1,4.1,2.1),
xpd=FALSE)
if (palette == "BASS") {
color <- c("gray52", "#80b1d3")
} else if (palette %in% row.names(brewer.pal.info)) {
color <- brewer.pal(3, palette)
} else if (all(areColors(palette)) & length(palette) == 2) {
color <- palette
} else {
stop('palette must be "BASS", an RColorBrewer palette, or a character with 2 valid color specifications.')
}
rm(color)
palette = "BASS"
origPar = par(no.readonly = TRUE) # so graphical parameters can be reset after
par(mai=c(1.36,1.093333,1.093333,0.56),
mar=c(5.1,4.1,4.1,2.1),
xpd=FALSE)
if (palette == "BASS") {
color <- c("gray52", "#80b1d3")
} else if (palette %in% row.names(brewer.pal.info)) {
color <- brewer.pal(3, palette)
} else if (all(areColors(palette)) & length(palette) == 2) {
color <- palette
} else {
stop('palette must be "BASS", an RColorBrewer palette, or a character with 2 valid color specifications.')
}
if (is.null(dim)) {
D <- 1:results$estSummary$D
} else if (is.numeric(dim)) {
D <- dim
}
K <- ncol(results$itemThres)
inclCons <- results$consInfo$cons.ID[D]
inclItem <- results$itemInfo$cons.ID %in% constructs
rm(inclCons)
inclItem <- results$itemInfo$cons.ID %in% inclCons
inclCons <- results$consInfo$cons.ID[D]
inclItem <- results$itemInfo$cons.ID %in% inclCons
rm(inclItem)
I <- results$itemInfo$cons.ID %in% inclCons
rm(inclCons)
K <- ncol(results$itemThres)
inclConsIDs <- results$consInfo$cons.ID[D]
inclItem <- results$itemInfo$cons.ID %in% inclConsIDs
devtools::load_all()
probs <- lapply(1:length(thetaGrid), catProbs, itemThres = results$itemThres[inclItem])
thetaGrid = seq(-6, 6, length.out = 100)
probs <- lapply(thetaGrid, catProbs, itemThres = results$itemThres[inclItem])
probs <- lapply(thetaGrid, catProbs, itemThres = results$itemThres[inclItem,])
probs[[1]]
probs[[49]]
infoItem <- sapply(1:length(probs), function(x) {
expScore <- apply(probs[[x]], 2, function(y) {
sum(0:K * y, na.rm = TRUE)
})
colSums(sapply(1:length(expScore), function(y) {
((0:K - expScore[y]) ^ 2) * probs[[x]][,y]
}), na.rm = TRUE)
})
pers <- results$scoresRecoded
View(pers)
pers <- !is.na(results$scoresRecoded)
View(pers)
pers <- !is.na(results$scoresRecoded[,inclItem])
d = 1
which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[2])
pers[,which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])]
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])]
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
results$persPars[,d]
pers <- !is.na(results$scoresRecoded[,inclItem])
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d]
}
}
View(pers)
pers <- !is.na(results$scoresRecoded[,inclItem])
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d] * pers[,c]
}
}
View(pers)
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d] * !is.na(results$scoresRecoded[,inclItem])
}
}
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d]
}
}
pers <- pers * !is.na(results$scoresRecoded[,inclItem])
View(pers)
!is.na(results$scoresRecoded[,inclItem])
View(pers)
pers <- !is.na(results$scoresRecoded[,inclItem])
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d]
}
}
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d]
}
}
View(pers)
pers[is.na(pers)]
is.na(pers)
is.na(results$scoresRecoded[,inclItem])
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (c in fillCol) {
pers[,c] <- results$persPars[,d]
}
}
# put NAs in if they didn't answer the question
pers[is.na(results$scoresRecoded[,inclItem])] <- NA
View(pers)
apply(pers, 1, function(x) {
lapply(x, catProbs, itemThres = results$itemThres[inclItem,])
})
rm(probsPers)
?all.na
any.na
?anyNA
apply(results$scoresRecoded, 1, anyNA)
apply(results$scoresRecoded, 1, !anyNA)
!apply(results$scoresRecoded, 1, anyNA)
head(results$persPars)
which.min(abs(results$persPars[,d] - thetaGrid))
results$estSummary$N
d = 1
n = 1
which.min(abs(results$persPars[n,d] - thetaGrid))
infoItem[which.min(abs(results$persPars[n,d] - thetaGrid)),]
infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))]
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
}
}
View(pers)
class(pers[,1])
d = 1
n = 1
pers <- results$scoresRecoded[,inclItem]
View(pers)
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
fillCol
pers[n,fillCol]
infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
pers[n,fillCol]
View(pers)
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
}
}
View(pers)
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
}
}
View(pers)
# put NAs in if they didn't answer the question
pers[is.na(results$scoresRecoded[,inclItem])] <- NA
View(pers)
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
}
}
completeOnly = FALSE
pers <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
}
}
# put NAs in if they didn't answer the question
if (!completeOnly) {
persFull <- pers
}
pers[is.na(results$scoresRecoded[,inclItem])] <- NA
rm(pers,persFull)
thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))]
infoPers <- thetas <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
pers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
thetas[n,fillCol] <- rep(thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))], length(fillCol))
}
}
infoPers <- thetas <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
thetas[n,fillCol] <- rep(thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))], length(fillCol))
}
}
View(thetas)
View(infoPers)
infoPers <- thetas <- results$scoresRecoded[,inclItem]
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
thetas[n,fillCol] <- rep(thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))], length(fillCol))
}
}
# put NAs in if they didn't answer the question
infoPers[is.na(results$scoresRecoded[,inclItem])] <- NA
points(thetas[,i], infoPers[,i])
i = 1
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(infoItem[i,])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Item Information Curve")
mtext(as.character(results$itemInfo$item.name[i]))
lines(thetaGrid, infoItem[i,], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[,i], infoPers[,i])
?pch
points(thetas[,i], infoPers[,i], pch = 21, bg = color[2])
points(thetas[,i], infoPers[,i], pch = 21, col = color[1], bg = color[2])
writeout = FALSE
for (i in 1:length(inclItem)) {
if(writeout) {
eval(parse(text = paste0(imageType, "('IIC-item", i, fileSuffix, ".",
imageType, "')")))
}
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(infoItem[i,])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Item Information Curve")
mtext(as.character(results$itemInfo$item.name[i]))
lines(thetaGrid, infoItem[i,], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[,i], infoPers[,i], pch = 21, col = color[1], bg = color[2])
if (writeout) {
dev.off
}
}
View(infoItem)
testInfo <- rowSums(infoItem)
View(infoPers)
testInfo <- rowSums(infoItem)
testInfoPers <- rowSums(infoPers, na.rm = TRUE)
testInfo
testInfoPers
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(infoItem[i,])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Test Information Curve")
d = 1
mtext(as.character(results$consInfo$cons.name[d]))
mtext(as.character(results$consInfo$short.name[d]))
View(infoItem)
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
itemsD
testInfo <- matrix(nrow = length(thetaGrid), ncol = length(inclItem))
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = rowSums(infoItem[itemsD,])
#testInfoPers <- rowSums(infoPers[], na.rm = TRUE)
}
rowSums(infoItem[itemsD,])
testInfo <- matrix(nrow = length(thetaGrid), ncol = results$estSummary$D)
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = rowSums(infoItem[itemsD,])
#testInfoPers <- rowSums(infoPers[], na.rm = TRUE)
}
rowSums(infoItem[itemsD,])
View(infoItem)
testInfo <- matrix(nrow = length(thetaGrid), ncol = results$estSummary$D)
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = colSums(infoItem[itemsD,])
#testInfoPers <- rowSums(infoPers[], na.rm = TRUE)
}
View(testInfo)
View(infoPers)
testInfoPers <- rowSums(infoPers[,itemsD], na.rm = TRUE)
testInfo <- matrix(nrow = length(thetaGrid), ncol = results$estSummary$D)
testInfoPers <- matrix(nrow = results$estSummary$N, ncol = results$estSummary$D)
for (d in D) {
itemsD <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
testInfo[,d] = colSums(infoItem[itemsD,])
testInfoPers[,d] = rowSums(infoPers[,itemsD], na.rm = TRUE)
}
View(testInfoPers)
thetas
lines(thetaGrid, testInfo[d], lwd = 2, col = color[1])
lines(thetaGrid, testInfo[,d], lwd = 2, col = color[1])
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(testInfo[,d])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Test Information Curve")
mtext(as.character(results$consInfo$short.name[d]))
lines(thetaGrid, testInfo[,d], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
thetas <- results$persPars
thetas <- results$persPars
n = 1
d = 1
View(thetas)
infoPers <- results$scoresRecoded[,inclItem]
if (type == "IIC") {
thetas <- results$scoresRecoded[,inclItem]
} else {
thetas <- results$persPars
}
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
if (type == "IIC") {
thetas[n,fillCol] = rep(thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))], length(fillCol))
} else {
thetas[n,d] = thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))]
}
}
}
type = "SEM"
infoPers <- results$scoresRecoded[,inclItem]
if (type == "IIC") {
thetas <- results$scoresRecoded[,inclItem]
} else {
thetas <- results$persPars
}
for (d in D) {
fillCol <- which(results$itemInfo$cons.ID[inclItem] == results$consInfo$cons.ID[d])
for (n in 1:results$estSummary$N) {
infoPers[n,fillCol] <- infoItem[,which.min(abs(results$persPars[n,d] - thetaGrid))][fillCol]
if (type == "IIC") {
thetas[n,fillCol] = rep(thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))], length(fillCol))
} else {
thetas[n,d] = thetaGrid[which.min(abs(results$persPars[n,d] - thetaGrid))]
}
}
}
View(thetas)
points(thetas[,d], testInfoPers[,d], pch = 21, col = color[1], bg = color[2])
rep(TRUE, nrow(results$persPars))
complete.cases(results$scoresRecoded)
persToPlot <- complete.cases(results$scoresRecoded)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(testInfo[,d])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Test Information Curve")
mtext(as.character(results$consInfo$short.name[d]))
lines(thetaGrid, testInfo[,d], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[persToPlot, d], testInfoPers[persToPlot, d], pch = 21, col = color[1], bg = color[2])
persToPlot <- rep(TRUE, nrow(results$persPars))
points(thetas[persToPlot, d], testInfoPers[persToPlot, d], pch = 21, col = color[1], bg = color[2])
for (d in D) {
if(writeout) {
eval(parse(text = paste0(imageType, "('TIC-cons", d, fileSuffix, ".",
imageType, "')")))
}
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(testInfo[,d])), axes = FALSE,
xlab = "Logits", ylab = "Information",
main = "Test Information Curve")
mtext(as.character(results$consInfo$short.name[d]))
lines(thetaGrid, testInfo[,d], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[persToPlot, d], testInfoPers[persToPlot, d], pch = 21, col = color[1], bg = color[2])
if (writeout) {
dev.off
}
}
for (d in D) {
if(writeout) {
eval(parse(text = paste0(imageType, "('SEM-cons", d, fileSuffix, ".",
imageType, "')")))
}
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(testInfo[,d])), axes = FALSE,
xlab = "Logits", ylab = "SEM",
main = "Standard Error of Measurement")
mtext(as.character(results$consInfo$short.name[d]))
lines(thetaGrid, 1 / testInfo[,d], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[persToPlot, d], 1 / testInfoPers[persToPlot, d], pch = 21, col = color[1], bg = color[2])
if (writeout) {
dev.off
}
}
for (d in D) {
if(writeout) {
eval(parse(text = paste0(imageType, "('SEM-cons", d, fileSuffix, ".",
imageType, "')")))
}
maxX <- 2 * ceiling(max(thetaGrid)/2)
minX <- 2 * floor(min(thetaGrid)/2)
plot(1, type = "n", xlim = c(min(thetaGrid), max(thetaGrid)),
ylim = c(0, max(1 / testInfo[,d])), axes = FALSE,
xlab = "Logits", ylab = "SEM",
main = "Standard Error of Measurement")
mtext(as.character(results$consInfo$short.name[d]))
lines(thetaGrid, 1 / testInfo[,d], lwd = 2, col = color[1])
axis(1, at = seq(minX, maxX, 2))
axis(1, at = seq(minX+1, maxX-1, 2), labels = FALSE)
axis(2)
points(thetas[persToPlot, d], 1 / testInfoPers[persToPlot, d], pch = 21, col = color[1], bg = color[2])
if (writeout) {
dev.off
}
}
devtools::load_all()
rm(list=ls())
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
info.graph(AMY)
info.graph(AMY, type = "IIC")
info.graph(AMY, type = "TIC")
info.graph(AMY, dim = 1, type = "TIC")
info.graph(AMY, type = "IIC", dim = 2)
info.graph(AMY, type = "IIC", dim = 1) # error in this one
info.graph(AMY, dim = 1, type = "TIC", completeOnly = FALSE)
item.analysis(AMY)
