AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
use_data(SUP, overwrite=TRUE)
devtools::use_data(SUP, overwrite=TRUE)
devtools::use_data(ADP, overwrite=TRUE)
devtools::use_data(AMY, overwrite=TRUE)
rm(list=ls())
devtools::load_all()
devtools::test()
AMY$itemFit[SUProws, c(2,6)]
ADProws = which(AMY$itemInfo$cons.ID == 22)
SUProws = which(AMY$itemInfo$cons.ID == 11)
AMY$itemFit[SUProws, c(2,6)]
SUP$itemFit[1:15, c(2,6)]
devtools::test()
item.analysis(AMY)[[2]]$Count[item.analysis(AMY)[[2]]$Count!=0]
unlist(apply(AMYwide, 2, table))
item.analysis(AMY)[[1]]$Construct
AMY$consInfo$short.name[match(AMY$itemInfo$cons.ID,
AMY$consInfo$cons.ID)]
as.character(item.analysis(AMY)[[1]]$Construct)
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
pers.hist(SUP, palette = c("pink", "green")
)
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
pers.hist(SUP, palette = c("pink", "green"))
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
?item.scores
item.scores(SUP, palette = "pink")
devtools::load_all()
devtools::test()
?CPC.graph
devtools::test()
CPC.graph(AMY, observed = TRUE)
devtools::test()
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(SUP, palette = "PuBu")
CPC.graph(SUP, observed = TRUE, minCell = 12)
CPC.graph(SUP, observed = TRUE, minCell = 12, focusTheta = 1.5)
devtools::load_all()
CPC.graph(SUP, observed = TRUE, minCell = 12, focusTheta = 1.5)
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(AMY, itemOrder = c(4,9,2))
CPC.graph(SUP, palette = "PuBu")
CPC.graph(SUP, observed = TRUE, minCell = 12)
CPC.graph(SUP, observed = FALSE, focusTheta = 1.5)
devtools::load_all
devtools::load_all()
CPC.graph(AMY, itemOrder = c(4,9,2)) # fix grey lines
CPC.graph(SUP, palette = "PuBu")     # fix grey lines
CPC.graph(SUP, observed = FALSE, focusTheta = 1.5) # fix grey lines
?ICC.graph
ICC.graph(SUP, palette = c("red", "blue", "no"))
devtools::load_all()
ICC.graph(SUP, palette = c("red", "blue", "no"))
ICC.graph(SUP, palette = "gray")
(ICC.graph(AMY, itemOrder = c(30:32))
)
devtools::test()
?info.graph
info.graph(SUP, palette = "sup")
devtools::load_all()
info.graph(SUP, palette = "sup")
info.graph(SUP, palette = c("red", "yellow", "blue"))
info.graph(AMY, dim = 6)
info.graph(SUP, thetaGrid = NULL)
info.graph(SUP, thetaGrid = c(-1, 0, 1))
info.graph(SUP, completeOnly = FALSE)
info.graph(SUP, palette = "PuBu")
info.graph(SUP, palette = c("red", "blue"))
})
info.graph(SUP, type = "TIC", completeOnly = FALSE)
info.graph(SUP, type = "TIC", palette = c("red", "pink"))
info.graph(SUP, type = "IIC")
devtools::test()
?wm
devtools::load_all()
wm(AMY, dim = 4)
wm(SUP, byCat = "TRUE")
(wm(SUP, palette = "red")
)
wm(AMY)
wm(AMY, dim = 2)
wm(AMY, byCat = TRUE)
wm(SUP, byCat = TRUE)
wm(AMY, dim = 2, byCat = TRUE)
devtools::test()
devtools::load_all()
citation(crasch)
citation('crasch')
?citation
devtools::load_all()
?citation
citation('crasch')
devtools::load_all()
devtools::load_all()
devtools::load_all()
citation('crasch')
devtools::load_all()
citation('crasch')
?crasch
devtools::document()
?crasch
package?crasch
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
?crasch
devtools::document()
?crasch
devtools::load_all()
devtools::document()
?crasch
devtools::load_all()
devtools::document()
?crasch
devtools::document()
?crasch
?cor
?craschR
rm(lisls())
rm(list=ls())
nrow(SUPitem)
nrow(ADPitem)
ADP1 <- craschR(scores = ADPwide[,c(1,2,4,7,8,10,12)],
itemInfo = ADPitem[c(1,2,4,7,8,10,12),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
ADP2 <- craschR(scores = ADPwide[,c(3,5,6,9,11,13)],
itemInfo = ADPitem[c(3,5,6,9,11,13),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
results1 <- ADP1
results2 <- ADP2
results1$estSummary
devtools::load_all()
SUP <- craschR(scores = SUPwide, itemInfo = SUPitem, consInfo = SUPcons,
varsInfo = SUPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
ADP <- craschR(scores = ADPwide, itemInfo = ADPitem, consInfo = ADPcons,
varsInfo = ADPvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = FALSE, writeout = FALSE)
AMY <- craschR(scores = AMYwide, itemInfo = AMYitem, consInfo = AMYcons,
varsInfo = AMYvars, estPackage = "TAM", retainOrig = TRUE,
consecutive = TRUE, writeout = FALSE)
ADP1 <- craschR(scores = ADPwide[,c(1,2,4,7,8,10,12)],
itemInfo = ADPitem[c(1,2,4,7,8,10,12),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
ADP2 <- craschR(scores = ADPwide[,c(3,5,6,9,11,13)],
itemInfo = ADPitem[c(3,5,6,9,11,13),], consInfo = ADPcons,
estPackage = "TAM", retainOrig = TRUE, consecutive = FALSE,
writeout = FALSE)
use_data(AMY, overwrite = TRUE)
devtools::use_data(AMY, overwrite = TRUE)
devtools::use_data(ADP, overwrite = TRUE)
devtools::use_data(SUP, overwrite = TRUE)
results1 < ADP1
results1 <- ADP1
results2 <- ADP2
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::build()
??install.github
devtools::load_all()
results <- AMY
itemOrder <- 1:results$estSummary$I
results$itemInfo[itemOrder, ]
itemInfo <- results$itemInfo[itemOrder, ]
unique(itemInfo$cons.ID)
results$consInfo$cons.ID
D <- which(results$consInfo$cons.ID %in% unique(itemInfo$cons.ID))
D
d=1
itemInfo[itemInfo$cons.ID == results$consInfo$cons.ID[d],]
inclItems <- itemInfo[itemInfo$cons.ID == results$consInfo$cons.ID[d],]
itemInfo$cons.ID == results$consInfo$cons.ID[d]
rm(itemInfo)
itemInfo <- results$itemInfo[itemOrder,]
scoresRecoded <- results$scoresRecoded[,itemOrder]
inclItems <- itemInfo$cons.ID == results$consInfo$cons.ID[d]
itemInfo[inclItems, ]
itemInfo[inclItems, 6:ncol(itemInfo)]
apply(itemInfo[inclItems, 6:ncol(itemInfo)], sum)
?sum
sum(itemInfo[1, 6:ncol(itemInfo)])
sum(c(TRUE,FALSE,TRUE))
apply(as.logical(itemInfo[inclItems, 6:ncol(itemInfo)]), sum)
as.logical(itemInfo[inclItems, 6:ncol(itemInfo)])
as.matrix(itemInfo[inclItems, 6:ncol(itemInfo)])
max(apply(as.matrix(itemInfo[inclItems, 6:ncol(itemInfo)]), sum))
as.matrix(itemInfo[1, 6:ncol(itemInfo)])
sum(as.matrix(itemInfo[1, 6:ncol(itemInfo)]))
max(apply(as.matrix(itemInfo[inclItems, 6:ncol(itemInfo)]), 1, sum))
matrix(NA, nrow = length(inclItems), ncol = maxK_d)
maxK_d <- max(apply(as.matrix(itemInfo[inclItems, 6:ncol(itemInfo)]), 1,
sum))
matrix(NA, nrow = length(inclItems), ncol = maxK_d)
inclItems <- itemInfo$cons.ID == results$consInfo$cons.ID[d]
meanLocs <- sdLocs <- matrix(NA, nrow = sum(inclItems), ncol = maxK_d)
meanLocs
which(inclItems)
i = 1
0:sum(itemInfo[i, 6:ncol(itemInfo)])
sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))
sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i]] == x)
})
results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x])
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
})
sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
c(mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE),
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE))
})
for (i in which(inclItems)) {
sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
c(mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE),
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE))
})
}
0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))
table(scoresRecoded[,i])
itemInfo[i, 6:ncol(itemInfo)]
rm(maxK_d)
ncol(results$itemPars)
meanLocs <- sdLocs <- matrix(NA, nrow = sum(inclItems),
ncol = ncol(results$itemPars))
inclItems <- itemInfo$cons.ID == results$consInfo$cons.ID[d]
1:sum(inclItems)
j <- 1
meanLocs[j,] <- mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
meanLocs[j,] <- sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
})
rep(NA,0)
sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))
ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))
sapply(0:sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])), function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
})
c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))-1), function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d], na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1)
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
sdLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
meanLocs
sdLocs
j <- 1
for (i in which(inclItems)) {
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
sdLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
}
meanLocs
j <- 1
for (i in which(inclItems)) {
meanLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
mean(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
sdLocs[j,] <- c(sapply(0:(sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)])) - 1),
function(x) {
sd(results$persPars[scoresRecoded[!is.na(scoresRecoded[,i]), i] == x, d],
na.rm = TRUE)
}), rep(NA, ncol(meanLocs) - sum(as.matrix(itemInfo[i, 6:ncol(itemInfo)]))))
j = j + 1
}
sdLocs
meanLocs
names(item.analysis(AMY))
item.analysis(AMY)
?interaction.plot
paste0(imageType, "('meanTraj", d, fileSuffix, ".",
imageType, "')")
imageType = "pdf"
paste0(imageType, "('meanTraj", d, fileSuffix, ".",
imageType, "')")
fileSuffix = NULL
paste0(imageType, "('meanTraj", d, fileSuffix, ".",
imageType, "')")
?reshape
cbind(itemInfo$item.name, meanLocs)
cbind(itemInfo$item.name[inclItems], meanLocs)
reshape(cbind(itemInfo$item.name[inclItems], meanLocs),
varying = 2:6, direction = "long")
data.frame(itemInfo$item.name[inclItems], meanLocs)
reshape(data.frame(itemInfo$item.name[inclItems], meanLocs),
varying = 2:6, direction = "long")
reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 2:6, direction = "long")
reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 2:6, v.names = "X", direction = "long")
reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:5, v.names = "X", direction = "long")
reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:ncol(meanLocs), v.names = "X",
idvar = ncol(meanLocs) + 1, direction = "long")
meanLocsLong <- reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:ncol(meanLocs), v.names = "X",
direction = "long")
colnames(meanLocsLong)[1] <- "Item"
meanLocsLong
interaction.plot(x.factor = meanLocsLong$time,
trace.factor = meanLocsLong$Item,
response = meanLocsLong$X)
meanLocsLong <- reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:ncol(meanLocs), v.names = "X",
direction = "long")
colnames(meanLocsLong)[1] <- "Item"
View(meanLocsLong)
order(meanLocsLong$id)
meanLocsLong[order(meanLocsLong$id),]
meanLocsLong <- meanLocsLong[order(meanLocsLong$id),]
interaction.plot(x.factor = meanLocsLong$time,
trace.factor = meanLocsLong$Item,
response = meanLocsLong$X)
meanLocsLong
interaction.plot(x.factor = meanLocsLong$time,
trace.factor = meanLocsLong$Item,
response = meanLocsLong$X)
meanLocsLong$score <- meanLocsLong$time - 1
meanLocsLong
meanLocsLong <- reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:ncol(meanLocs), v.names = "X",
direction = "long")
meanLocsLong = [complete.cases(meanLocsLong),]
colnames(meanLocsLong)[1] <- "Item"
meanLocsLong = meanLocsLong[order(meanLocsLong$id),]
meanLocsLong$score = meanLocsLong$time - 1
meanLocsLong <- reshape(data.frame(meanLocs, itemInfo$item.name[inclItems]),
varying = 1:ncol(meanLocs), v.names = "X",
direction = "long")
meanLocsLong = [complete.cases(meanLocsLong), ]
meanLocsLong = meanLocsLong[complete.cases(meanLocsLong), ]
colnames(meanLocsLong)[1] <- "Item"
meanLocsLong = meanLocsLong[order(meanLocsLong$id),]
meanLocsLong$score = meanLocsLong$time - 1
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$Item,
response = meanLocsLong$X)
meanLocsLong
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$Item,
response = meanLocsLong$X,
legend = FALSE, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
reshape(meanLocs,
direction = "long")
reshape(meanLocs, varying = 1:ncol(meanLocs),
direction = "long")
data.frame(meanLocs)
reshape(data.frame(meanLocs), varying = 1:ncol(meanLocs),
v.names = "X", direction = "long")
meanLocsLong <- reshape(data.frame(meanLocs), varying = 1:ncol(meanLocs),
v.names = "X", direction = "long")
meanLocsLong = meanLocsLong[complete.cases(meanLocsLong), ]
meanLocsLong$score = meanLocsLong$time - 1
meanLocsLong
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$id,
response = meanLocsLong$X,
legend = FALSE, col = color, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$id,
response = meanLocsLong$X,
legend = FALSE, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$id,
response = meanLocsLong$X,
legend = FALSE, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
brewer.pal.info
palette = PuBu
palette = "PuBu"
which(row.names(brewer.pal.info) == palette)
min(which(row.names(brewer.pal.info) == palette),
length(inclItems))
brewer.pal.info$maxcolors[which(row.names(brewer.pal.info) == palette)]
length(inclItems)
min(brewer.pal.info$maxcolors[which(row.names(brewer.pal.info) == palette)],
length(inclItems))
brewer.pal(min(length(inclItems),
brewer.pal.info$maxcolors[which(row.names(brewer.pal.info) == palette)]),
palette)
if (identical(palette, "BASS")) {
color <- "#80b1d3"
} else if (palette %in% row.names(brewer.pal.info)) {
color <- brewer.pal(min(length(inclItems),
brewer.pal.info$maxcolors[which(row.names(brewer.pal.info) == palette)]),
palette)
} else if (all(areColors(palette))) {
color <- palette
} else {
'Invalid palette argument.'
}
color
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$id,
response = meanLocsLong$X,
legend = FALSE, col = color, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
palette = "BASS"
if (identical(palette, "BASS")) {
color <- "#80b1d3"
} else if (palette %in% row.names(brewer.pal.info)) {
color <- brewer.pal(min(length(inclItems),
brewer.pal.info$maxcolors[which(row.names(brewer.pal.info) == palette)]),
palette)
} else if (all(areColors(palette))) {
color <- palette
} else {
'Invalid palette argument.'
}
interaction.plot(x.factor = meanLocsLong$score,
trace.factor = meanLocsLong$id,
response = meanLocsLong$X,
legend = FALSE, col = color, lty = 1, lwd = 2,
ylab = "Mean Location", xlab = "Numeric Score",
main = "Mean Location Trajectories by Item")
output <- list()
which(D == )
which(D == d)
row.names(meanLocs) <- itemInfo$item.name
col.names(meanLocs) <- paste0(cat, 0:(ncol(meanLocs) - 1))
row.names(meanLocs) <- itemInfo$item.name[inclItems]
col.names(meanLocs) <- paste0("cat", 0:(ncol(meanLocs) - 1))
meanLocs <- matrix(NA, nrow = sum(inclItems),
ncol = ncol(results$itemPars))
row.names(meanLocs) <- itemInfo$item.name[inclItems]
colnames(meanLocs) <- paste0("cat", 0:(ncol(meanLocs) - 1))
meanLocs
devtools::load_all()
rm(meanLocs,meanLocsLong,sdLocs,color,D,d)
rm(i,j,imageType,inclItems,itemOrder)
rm(palette,output,fileSuffix,scoresRecoded)
rm(itemInfo)
mean.traj(AMY)
devtools::load_all()
mean.traj(AMY)
devtools::load_all()
mean.traj(AMY)
devtools::load_all()
mean.traj(AMY)
mean.traj(ADP)
mean.traj(AMY)
devtools::load_all()
mean.traj(AMY)
mean.traj(SUP)
mean.traj(SUP,palette = "Set3")
devtools::document()
?mean.traj
devtools::document()
